/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foodRecipe.core.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-3")
public class UserAPI {

  public interface Iface {

    /**
     * sign up
     * @param string email -
     * @param string password -
     * @return UserInfo.User = return an User Information
     * 
     * @param email
     * @param password
     */
    public com.foodRecipe.core.thrift.model.user.User signup(String email, String password) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

    /**
     * sign up with facebook
     * @param string fb_id - facebook user id
     * @param string email - facebook account email
     * @param string name - facebook user name
     * @param string pic_url - facebook profile image url
     * @return UserInfo.User = return an User Information
     * 
     * @param fb_id
     * @param name
     * @param pic_url
     */
    public com.foodRecipe.core.thrift.model.user.User signupWithFacebook(String fb_id, String name, String pic_url) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

    /**
     * sign up with kakao
     * @param string ko_id - kakao user id
     * @param string email - kakao account email
     * @param string name - facebook user name
     * @param string pic_url - facebook profile image url
     * @return UserInfo.User = return an User Information
     * 
     * @param ko_id
     * @param name
     * @param pic_url
     */
    public com.foodRecipe.core.thrift.model.user.User signupWithKakao(String ko_id, String name, String pic_url) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

    /**
     * sign in
     * @param string email -
     * @param string password -
     * @return UserInfo.User - return an User Information
     * 
     * @param email
     * @param password
     */
    public com.foodRecipe.core.thrift.model.user.User signin(String email, String password) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

    /**
     * sign out
     * @param string token -
     * 
     * @param token
     */
    public void signout(String token) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

    /**
     * withdraw
     * @param string token -
     * @param string password - If you want to withdraw, make password
     * 
     * @param token
     * @param password
     */
    public void withdraw(String token, String password) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

    /**
     * get user information
     * @param string token -
     * @return UserInfo.User - return an User Information
     * 
     * @param token
     */
    public com.foodRecipe.core.thrift.model.user.User getUserInfo(String token) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void signup(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signupWithFacebook(String fb_id, String name, String pic_url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signupWithKakao(String ko_id, String name, String pic_url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signin(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signout(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void withdraw(String token, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserInfo(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.foodRecipe.core.thrift.model.user.User signup(String email, String password) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_signup(email, password);
      return recv_signup();
    }

    public void send_signup(String email, String password) throws org.apache.thrift.TException
    {
      signup_args args = new signup_args();
      args.setEmail(email);
      args.setPassword(password);
      sendBase("signup", args);
    }

    public com.foodRecipe.core.thrift.model.user.User recv_signup() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      signup_result result = new signup_result();
      receiveBase(result, "signup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.uex != null) {
        throw result.uex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signup failed: unknown result");
    }

    public com.foodRecipe.core.thrift.model.user.User signupWithFacebook(String fb_id, String name, String pic_url) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_signupWithFacebook(fb_id, name, pic_url);
      return recv_signupWithFacebook();
    }

    public void send_signupWithFacebook(String fb_id, String name, String pic_url) throws org.apache.thrift.TException
    {
      signupWithFacebook_args args = new signupWithFacebook_args();
      args.setFb_id(fb_id);
      args.setName(name);
      args.setPic_url(pic_url);
      sendBase("signupWithFacebook", args);
    }

    public com.foodRecipe.core.thrift.model.user.User recv_signupWithFacebook() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      signupWithFacebook_result result = new signupWithFacebook_result();
      receiveBase(result, "signupWithFacebook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.uex != null) {
        throw result.uex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signupWithFacebook failed: unknown result");
    }

    public com.foodRecipe.core.thrift.model.user.User signupWithKakao(String ko_id, String name, String pic_url) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_signupWithKakao(ko_id, name, pic_url);
      return recv_signupWithKakao();
    }

    public void send_signupWithKakao(String ko_id, String name, String pic_url) throws org.apache.thrift.TException
    {
      signupWithKakao_args args = new signupWithKakao_args();
      args.setKo_id(ko_id);
      args.setName(name);
      args.setPic_url(pic_url);
      sendBase("signupWithKakao", args);
    }

    public com.foodRecipe.core.thrift.model.user.User recv_signupWithKakao() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      signupWithKakao_result result = new signupWithKakao_result();
      receiveBase(result, "signupWithKakao");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.uex != null) {
        throw result.uex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signupWithKakao failed: unknown result");
    }

    public com.foodRecipe.core.thrift.model.user.User signin(String email, String password) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_signin(email, password);
      return recv_signin();
    }

    public void send_signin(String email, String password) throws org.apache.thrift.TException
    {
      signin_args args = new signin_args();
      args.setEmail(email);
      args.setPassword(password);
      sendBase("signin", args);
    }

    public com.foodRecipe.core.thrift.model.user.User recv_signin() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      signin_result result = new signin_result();
      receiveBase(result, "signin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.uex != null) {
        throw result.uex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signin failed: unknown result");
    }

    public void signout(String token) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_signout(token);
      recv_signout();
    }

    public void send_signout(String token) throws org.apache.thrift.TException
    {
      signout_args args = new signout_args();
      args.setToken(token);
      sendBase("signout", args);
    }

    public void recv_signout() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      signout_result result = new signout_result();
      receiveBase(result, "signout");
      if (result.uex != null) {
        throw result.uex;
      }
      return;
    }

    public void withdraw(String token, String password) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_withdraw(token, password);
      recv_withdraw();
    }

    public void send_withdraw(String token, String password) throws org.apache.thrift.TException
    {
      withdraw_args args = new withdraw_args();
      args.setToken(token);
      args.setPassword(password);
      sendBase("withdraw", args);
    }

    public void recv_withdraw() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      withdraw_result result = new withdraw_result();
      receiveBase(result, "withdraw");
      if (result.uex != null) {
        throw result.uex;
      }
      return;
    }

    public com.foodRecipe.core.thrift.model.user.User getUserInfo(String token) throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      send_getUserInfo(token);
      return recv_getUserInfo();
    }

    public void send_getUserInfo(String token) throws org.apache.thrift.TException
    {
      getUserInfo_args args = new getUserInfo_args();
      args.setToken(token);
      sendBase("getUserInfo", args);
    }

    public com.foodRecipe.core.thrift.model.user.User recv_getUserInfo() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException
    {
      getUserInfo_result result = new getUserInfo_result();
      receiveBase(result, "getUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.uex != null) {
        throw result.uex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void signup(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signup_call method_call = new signup_call(email, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      private String password;
      public signup_call(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signup_args args = new signup_args();
        args.setEmail(email);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.foodRecipe.core.thrift.model.user.User getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signup();
      }
    }

    public void signupWithFacebook(String fb_id, String name, String pic_url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signupWithFacebook_call method_call = new signupWithFacebook_call(fb_id, name, pic_url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signupWithFacebook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fb_id;
      private String name;
      private String pic_url;
      public signupWithFacebook_call(String fb_id, String name, String pic_url, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fb_id = fb_id;
        this.name = name;
        this.pic_url = pic_url;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signupWithFacebook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signupWithFacebook_args args = new signupWithFacebook_args();
        args.setFb_id(fb_id);
        args.setName(name);
        args.setPic_url(pic_url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.foodRecipe.core.thrift.model.user.User getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signupWithFacebook();
      }
    }

    public void signupWithKakao(String ko_id, String name, String pic_url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signupWithKakao_call method_call = new signupWithKakao_call(ko_id, name, pic_url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signupWithKakao_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ko_id;
      private String name;
      private String pic_url;
      public signupWithKakao_call(String ko_id, String name, String pic_url, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ko_id = ko_id;
        this.name = name;
        this.pic_url = pic_url;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signupWithKakao", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signupWithKakao_args args = new signupWithKakao_args();
        args.setKo_id(ko_id);
        args.setName(name);
        args.setPic_url(pic_url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.foodRecipe.core.thrift.model.user.User getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signupWithKakao();
      }
    }

    public void signin(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signin_call method_call = new signin_call(email, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      private String password;
      public signin_call(String email, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signin_args args = new signin_args();
        args.setEmail(email);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.foodRecipe.core.thrift.model.user.User getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signin();
      }
    }

    public void signout(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signout_call method_call = new signout_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public signout_call(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signout_args args = new signout_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_signout();
      }
    }

    public void withdraw(String token, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      withdraw_call method_call = new withdraw_call(token, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class withdraw_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private String password;
      public withdraw_call(String token, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("withdraw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        withdraw_args args = new withdraw_args();
        args.setToken(token);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_withdraw();
      }
    }

    public void getUserInfo(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInfo_call method_call = new getUserInfo_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public getUserInfo_call(String token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfo_args args = new getUserInfo_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.foodRecipe.core.thrift.model.user.User getResult() throws com.foodRecipe.core.thrift.model.user.UserException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("signup", new signup());
      processMap.put("signupWithFacebook", new signupWithFacebook());
      processMap.put("signupWithKakao", new signupWithKakao());
      processMap.put("signin", new signin());
      processMap.put("signout", new signout());
      processMap.put("withdraw", new withdraw());
      processMap.put("getUserInfo", new getUserInfo());
      return processMap;
    }

    public static class signup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signup_args> {
      public signup() {
        super("signup");
      }

      public signup_args getEmptyArgsInstance() {
        return new signup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signup_result getResult(I iface, signup_args args) throws org.apache.thrift.TException {
        signup_result result = new signup_result();
        try {
          result.success = iface.signup(args.email, args.password);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

    public static class signupWithFacebook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signupWithFacebook_args> {
      public signupWithFacebook() {
        super("signupWithFacebook");
      }

      public signupWithFacebook_args getEmptyArgsInstance() {
        return new signupWithFacebook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signupWithFacebook_result getResult(I iface, signupWithFacebook_args args) throws org.apache.thrift.TException {
        signupWithFacebook_result result = new signupWithFacebook_result();
        try {
          result.success = iface.signupWithFacebook(args.fb_id, args.name, args.pic_url);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

    public static class signupWithKakao<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signupWithKakao_args> {
      public signupWithKakao() {
        super("signupWithKakao");
      }

      public signupWithKakao_args getEmptyArgsInstance() {
        return new signupWithKakao_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signupWithKakao_result getResult(I iface, signupWithKakao_args args) throws org.apache.thrift.TException {
        signupWithKakao_result result = new signupWithKakao_result();
        try {
          result.success = iface.signupWithKakao(args.ko_id, args.name, args.pic_url);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

    public static class signin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signin_args> {
      public signin() {
        super("signin");
      }

      public signin_args getEmptyArgsInstance() {
        return new signin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signin_result getResult(I iface, signin_args args) throws org.apache.thrift.TException {
        signin_result result = new signin_result();
        try {
          result.success = iface.signin(args.email, args.password);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

    public static class signout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signout_args> {
      public signout() {
        super("signout");
      }

      public signout_args getEmptyArgsInstance() {
        return new signout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signout_result getResult(I iface, signout_args args) throws org.apache.thrift.TException {
        signout_result result = new signout_result();
        try {
          iface.signout(args.token);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

    public static class withdraw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, withdraw_args> {
      public withdraw() {
        super("withdraw");
      }

      public withdraw_args getEmptyArgsInstance() {
        return new withdraw_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public withdraw_result getResult(I iface, withdraw_args args) throws org.apache.thrift.TException {
        withdraw_result result = new withdraw_result();
        try {
          iface.withdraw(args.token, args.password);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

    public static class getUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfo_args> {
      public getUserInfo() {
        super("getUserInfo");
      }

      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfo_result getResult(I iface, getUserInfo_args args) throws org.apache.thrift.TException {
        getUserInfo_result result = new getUserInfo_result();
        try {
          result.success = iface.getUserInfo(args.token);
        } catch (com.foodRecipe.core.thrift.model.user.UserException uex) {
          result.uex = uex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("signup", new signup());
      processMap.put("signupWithFacebook", new signupWithFacebook());
      processMap.put("signupWithKakao", new signupWithKakao());
      processMap.put("signin", new signin());
      processMap.put("signout", new signout());
      processMap.put("withdraw", new withdraw());
      processMap.put("getUserInfo", new getUserInfo());
      return processMap;
    }

    public static class signup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signup_args, com.foodRecipe.core.thrift.model.user.User> {
      public signup() {
        super("signup");
      }

      public signup_args getEmptyArgsInstance() {
        return new signup_args();
      }

      public AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User>() { 
          public void onComplete(com.foodRecipe.core.thrift.model.user.User o) {
            signup_result result = new signup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signup_result result = new signup_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signup_args args, org.apache.thrift.async.AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> resultHandler) throws TException {
        iface.signup(args.email, args.password,resultHandler);
      }
    }

    public static class signupWithFacebook<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signupWithFacebook_args, com.foodRecipe.core.thrift.model.user.User> {
      public signupWithFacebook() {
        super("signupWithFacebook");
      }

      public signupWithFacebook_args getEmptyArgsInstance() {
        return new signupWithFacebook_args();
      }

      public AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User>() { 
          public void onComplete(com.foodRecipe.core.thrift.model.user.User o) {
            signupWithFacebook_result result = new signupWithFacebook_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signupWithFacebook_result result = new signupWithFacebook_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signupWithFacebook_args args, org.apache.thrift.async.AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> resultHandler) throws TException {
        iface.signupWithFacebook(args.fb_id, args.name, args.pic_url,resultHandler);
      }
    }

    public static class signupWithKakao<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signupWithKakao_args, com.foodRecipe.core.thrift.model.user.User> {
      public signupWithKakao() {
        super("signupWithKakao");
      }

      public signupWithKakao_args getEmptyArgsInstance() {
        return new signupWithKakao_args();
      }

      public AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User>() { 
          public void onComplete(com.foodRecipe.core.thrift.model.user.User o) {
            signupWithKakao_result result = new signupWithKakao_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signupWithKakao_result result = new signupWithKakao_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signupWithKakao_args args, org.apache.thrift.async.AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> resultHandler) throws TException {
        iface.signupWithKakao(args.ko_id, args.name, args.pic_url,resultHandler);
      }
    }

    public static class signin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signin_args, com.foodRecipe.core.thrift.model.user.User> {
      public signin() {
        super("signin");
      }

      public signin_args getEmptyArgsInstance() {
        return new signin_args();
      }

      public AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User>() { 
          public void onComplete(com.foodRecipe.core.thrift.model.user.User o) {
            signin_result result = new signin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signin_result result = new signin_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signin_args args, org.apache.thrift.async.AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> resultHandler) throws TException {
        iface.signin(args.email, args.password,resultHandler);
      }
    }

    public static class signout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signout_args, Void> {
      public signout() {
        super("signout");
      }

      public signout_args getEmptyArgsInstance() {
        return new signout_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            signout_result result = new signout_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signout_result result = new signout_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.signout(args.token,resultHandler);
      }
    }

    public static class withdraw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, withdraw_args, Void> {
      public withdraw() {
        super("withdraw");
      }

      public withdraw_args getEmptyArgsInstance() {
        return new withdraw_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            withdraw_result result = new withdraw_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            withdraw_result result = new withdraw_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, withdraw_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.withdraw(args.token, args.password,resultHandler);
      }
    }

    public static class getUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfo_args, com.foodRecipe.core.thrift.model.user.User> {
      public getUserInfo() {
        super("getUserInfo");
      }

      public getUserInfo_args getEmptyArgsInstance() {
        return new getUserInfo_args();
      }

      public AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User>() { 
          public void onComplete(com.foodRecipe.core.thrift.model.user.User o) {
            getUserInfo_result result = new getUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserInfo_result result = new getUserInfo_result();
            if (e instanceof com.foodRecipe.core.thrift.model.user.UserException) {
                        result.uex = (com.foodRecipe.core.thrift.model.user.UserException) e;
                        result.setUexIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.foodRecipe.core.thrift.model.user.User> resultHandler) throws TException {
        iface.getUserInfo(args.token,resultHandler);
      }
    }

  }

  public static class signup_args implements org.apache.thrift.TBase<signup_args, signup_args._Fields>, java.io.Serializable, Cloneable, Comparable<signup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signup_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signup_argsTupleSchemeFactory());
    }

    public String email; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signup_args.class, metaDataMap);
    }

    public signup_args() {
    }

    public signup_args(
      String email,
      String password)
    {
      this();
      this.email = email;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signup_args(signup_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public signup_args deepCopy() {
      return new signup_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
      this.password = null;
    }

    public String getEmail() {
      return this.email;
    }

    public signup_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public signup_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signup_args)
        return this.equals((signup_args)that);
      return false;
    }

    public boolean equals(signup_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email = true && (isSetEmail());
      list.add(present_email);
      if (present_email)
        list.add(email);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(signup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signup_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signup_argsStandardSchemeFactory implements SchemeFactory {
      public signup_argsStandardScheme getScheme() {
        return new signup_argsStandardScheme();
      }
    }

    private static class signup_argsStandardScheme extends StandardScheme<signup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signup_argsTupleSchemeFactory implements SchemeFactory {
      public signup_argsTupleScheme getScheme() {
        return new signup_argsTupleScheme();
      }
    }

    private static class signup_argsTupleScheme extends TupleScheme<signup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class signup_result implements org.apache.thrift.TBase<signup_result, signup_result._Fields>, java.io.Serializable, Cloneable, Comparable<signup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signup_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.User success; // required
    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.foodRecipe.core.thrift.model.user.User.class)));
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signup_result.class, metaDataMap);
    }

    public signup_result() {
    }

    public signup_result(
      com.foodRecipe.core.thrift.model.user.User success,
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.success = success;
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signup_result(signup_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.foodRecipe.core.thrift.model.user.User(other.success);
      }
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public signup_result deepCopy() {
      return new signup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.User getSuccess() {
      return this.success;
    }

    public signup_result setSuccess(com.foodRecipe.core.thrift.model.user.User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public signup_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.foodRecipe.core.thrift.model.user.User)value);
        }
        break;

      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signup_result)
        return this.equals((signup_result)that);
      return false;
    }

    public boolean equals(signup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(signup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signup_resultStandardSchemeFactory implements SchemeFactory {
      public signup_resultStandardScheme getScheme() {
        return new signup_resultStandardScheme();
      }
    }

    private static class signup_resultStandardScheme extends StandardScheme<signup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.foodRecipe.core.thrift.model.user.User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signup_resultTupleSchemeFactory implements SchemeFactory {
      public signup_resultTupleScheme getScheme() {
        return new signup_resultTupleScheme();
      }
    }

    private static class signup_resultTupleScheme extends TupleScheme<signup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.foodRecipe.core.thrift.model.user.User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

  public static class signupWithFacebook_args implements org.apache.thrift.TBase<signupWithFacebook_args, signupWithFacebook_args._Fields>, java.io.Serializable, Cloneable, Comparable<signupWithFacebook_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signupWithFacebook_args");

    private static final org.apache.thrift.protocol.TField FB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fb_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pic_url", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signupWithFacebook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signupWithFacebook_argsTupleSchemeFactory());
    }

    public String fb_id; // required
    public String name; // required
    public String pic_url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FB_ID((short)1, "fb_id"),
      NAME((short)2, "name"),
      PIC_URL((short)3, "pic_url");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FB_ID
            return FB_ID;
          case 2: // NAME
            return NAME;
          case 3: // PIC_URL
            return PIC_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FB_ID, new org.apache.thrift.meta_data.FieldMetaData("fb_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("pic_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signupWithFacebook_args.class, metaDataMap);
    }

    public signupWithFacebook_args() {
    }

    public signupWithFacebook_args(
      String fb_id,
      String name,
      String pic_url)
    {
      this();
      this.fb_id = fb_id;
      this.name = name;
      this.pic_url = pic_url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signupWithFacebook_args(signupWithFacebook_args other) {
      if (other.isSetFb_id()) {
        this.fb_id = other.fb_id;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetPic_url()) {
        this.pic_url = other.pic_url;
      }
    }

    public signupWithFacebook_args deepCopy() {
      return new signupWithFacebook_args(this);
    }

    @Override
    public void clear() {
      this.fb_id = null;
      this.name = null;
      this.pic_url = null;
    }

    public String getFb_id() {
      return this.fb_id;
    }

    public signupWithFacebook_args setFb_id(String fb_id) {
      this.fb_id = fb_id;
      return this;
    }

    public void unsetFb_id() {
      this.fb_id = null;
    }

    /** Returns true if field fb_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFb_id() {
      return this.fb_id != null;
    }

    public void setFb_idIsSet(boolean value) {
      if (!value) {
        this.fb_id = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public signupWithFacebook_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getPic_url() {
      return this.pic_url;
    }

    public signupWithFacebook_args setPic_url(String pic_url) {
      this.pic_url = pic_url;
      return this;
    }

    public void unsetPic_url() {
      this.pic_url = null;
    }

    /** Returns true if field pic_url is set (has been assigned a value) and false otherwise */
    public boolean isSetPic_url() {
      return this.pic_url != null;
    }

    public void setPic_urlIsSet(boolean value) {
      if (!value) {
        this.pic_url = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FB_ID:
        if (value == null) {
          unsetFb_id();
        } else {
          setFb_id((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PIC_URL:
        if (value == null) {
          unsetPic_url();
        } else {
          setPic_url((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FB_ID:
        return getFb_id();

      case NAME:
        return getName();

      case PIC_URL:
        return getPic_url();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FB_ID:
        return isSetFb_id();
      case NAME:
        return isSetName();
      case PIC_URL:
        return isSetPic_url();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signupWithFacebook_args)
        return this.equals((signupWithFacebook_args)that);
      return false;
    }

    public boolean equals(signupWithFacebook_args that) {
      if (that == null)
        return false;

      boolean this_present_fb_id = true && this.isSetFb_id();
      boolean that_present_fb_id = true && that.isSetFb_id();
      if (this_present_fb_id || that_present_fb_id) {
        if (!(this_present_fb_id && that_present_fb_id))
          return false;
        if (!this.fb_id.equals(that.fb_id))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_pic_url = true && this.isSetPic_url();
      boolean that_present_pic_url = true && that.isSetPic_url();
      if (this_present_pic_url || that_present_pic_url) {
        if (!(this_present_pic_url && that_present_pic_url))
          return false;
        if (!this.pic_url.equals(that.pic_url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fb_id = true && (isSetFb_id());
      list.add(present_fb_id);
      if (present_fb_id)
        list.add(fb_id);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_pic_url = true && (isSetPic_url());
      list.add(present_pic_url);
      if (present_pic_url)
        list.add(pic_url);

      return list.hashCode();
    }

    @Override
    public int compareTo(signupWithFacebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFb_id()).compareTo(other.isSetFb_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFb_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fb_id, other.fb_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPic_url()).compareTo(other.isSetPic_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPic_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic_url, other.pic_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signupWithFacebook_args(");
      boolean first = true;

      sb.append("fb_id:");
      if (this.fb_id == null) {
        sb.append("null");
      } else {
        sb.append(this.fb_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pic_url:");
      if (this.pic_url == null) {
        sb.append("null");
      } else {
        sb.append(this.pic_url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signupWithFacebook_argsStandardSchemeFactory implements SchemeFactory {
      public signupWithFacebook_argsStandardScheme getScheme() {
        return new signupWithFacebook_argsStandardScheme();
      }
    }

    private static class signupWithFacebook_argsStandardScheme extends StandardScheme<signupWithFacebook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signupWithFacebook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fb_id = iprot.readString();
                struct.setFb_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PIC_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pic_url = iprot.readString();
                struct.setPic_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signupWithFacebook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fb_id != null) {
          oprot.writeFieldBegin(FB_ID_FIELD_DESC);
          oprot.writeString(struct.fb_id);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.pic_url != null) {
          oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
          oprot.writeString(struct.pic_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signupWithFacebook_argsTupleSchemeFactory implements SchemeFactory {
      public signupWithFacebook_argsTupleScheme getScheme() {
        return new signupWithFacebook_argsTupleScheme();
      }
    }

    private static class signupWithFacebook_argsTupleScheme extends TupleScheme<signupWithFacebook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signupWithFacebook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFb_id()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetPic_url()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFb_id()) {
          oprot.writeString(struct.fb_id);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetPic_url()) {
          oprot.writeString(struct.pic_url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signupWithFacebook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fb_id = iprot.readString();
          struct.setFb_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pic_url = iprot.readString();
          struct.setPic_urlIsSet(true);
        }
      }
    }

  }

  public static class signupWithFacebook_result implements org.apache.thrift.TBase<signupWithFacebook_result, signupWithFacebook_result._Fields>, java.io.Serializable, Cloneable, Comparable<signupWithFacebook_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signupWithFacebook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signupWithFacebook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signupWithFacebook_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.User success; // required
    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.foodRecipe.core.thrift.model.user.User.class)));
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signupWithFacebook_result.class, metaDataMap);
    }

    public signupWithFacebook_result() {
    }

    public signupWithFacebook_result(
      com.foodRecipe.core.thrift.model.user.User success,
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.success = success;
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signupWithFacebook_result(signupWithFacebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.foodRecipe.core.thrift.model.user.User(other.success);
      }
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public signupWithFacebook_result deepCopy() {
      return new signupWithFacebook_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.User getSuccess() {
      return this.success;
    }

    public signupWithFacebook_result setSuccess(com.foodRecipe.core.thrift.model.user.User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public signupWithFacebook_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.foodRecipe.core.thrift.model.user.User)value);
        }
        break;

      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signupWithFacebook_result)
        return this.equals((signupWithFacebook_result)that);
      return false;
    }

    public boolean equals(signupWithFacebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(signupWithFacebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signupWithFacebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signupWithFacebook_resultStandardSchemeFactory implements SchemeFactory {
      public signupWithFacebook_resultStandardScheme getScheme() {
        return new signupWithFacebook_resultStandardScheme();
      }
    }

    private static class signupWithFacebook_resultStandardScheme extends StandardScheme<signupWithFacebook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signupWithFacebook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.foodRecipe.core.thrift.model.user.User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signupWithFacebook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signupWithFacebook_resultTupleSchemeFactory implements SchemeFactory {
      public signupWithFacebook_resultTupleScheme getScheme() {
        return new signupWithFacebook_resultTupleScheme();
      }
    }

    private static class signupWithFacebook_resultTupleScheme extends TupleScheme<signupWithFacebook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signupWithFacebook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signupWithFacebook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.foodRecipe.core.thrift.model.user.User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

  public static class signupWithKakao_args implements org.apache.thrift.TBase<signupWithKakao_args, signupWithKakao_args._Fields>, java.io.Serializable, Cloneable, Comparable<signupWithKakao_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signupWithKakao_args");

    private static final org.apache.thrift.protocol.TField KO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ko_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pic_url", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signupWithKakao_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signupWithKakao_argsTupleSchemeFactory());
    }

    public String ko_id; // required
    public String name; // required
    public String pic_url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KO_ID((short)1, "ko_id"),
      NAME((short)2, "name"),
      PIC_URL((short)3, "pic_url");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KO_ID
            return KO_ID;
          case 2: // NAME
            return NAME;
          case 3: // PIC_URL
            return PIC_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KO_ID, new org.apache.thrift.meta_data.FieldMetaData("ko_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("pic_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signupWithKakao_args.class, metaDataMap);
    }

    public signupWithKakao_args() {
    }

    public signupWithKakao_args(
      String ko_id,
      String name,
      String pic_url)
    {
      this();
      this.ko_id = ko_id;
      this.name = name;
      this.pic_url = pic_url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signupWithKakao_args(signupWithKakao_args other) {
      if (other.isSetKo_id()) {
        this.ko_id = other.ko_id;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetPic_url()) {
        this.pic_url = other.pic_url;
      }
    }

    public signupWithKakao_args deepCopy() {
      return new signupWithKakao_args(this);
    }

    @Override
    public void clear() {
      this.ko_id = null;
      this.name = null;
      this.pic_url = null;
    }

    public String getKo_id() {
      return this.ko_id;
    }

    public signupWithKakao_args setKo_id(String ko_id) {
      this.ko_id = ko_id;
      return this;
    }

    public void unsetKo_id() {
      this.ko_id = null;
    }

    /** Returns true if field ko_id is set (has been assigned a value) and false otherwise */
    public boolean isSetKo_id() {
      return this.ko_id != null;
    }

    public void setKo_idIsSet(boolean value) {
      if (!value) {
        this.ko_id = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public signupWithKakao_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getPic_url() {
      return this.pic_url;
    }

    public signupWithKakao_args setPic_url(String pic_url) {
      this.pic_url = pic_url;
      return this;
    }

    public void unsetPic_url() {
      this.pic_url = null;
    }

    /** Returns true if field pic_url is set (has been assigned a value) and false otherwise */
    public boolean isSetPic_url() {
      return this.pic_url != null;
    }

    public void setPic_urlIsSet(boolean value) {
      if (!value) {
        this.pic_url = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KO_ID:
        if (value == null) {
          unsetKo_id();
        } else {
          setKo_id((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PIC_URL:
        if (value == null) {
          unsetPic_url();
        } else {
          setPic_url((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KO_ID:
        return getKo_id();

      case NAME:
        return getName();

      case PIC_URL:
        return getPic_url();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KO_ID:
        return isSetKo_id();
      case NAME:
        return isSetName();
      case PIC_URL:
        return isSetPic_url();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signupWithKakao_args)
        return this.equals((signupWithKakao_args)that);
      return false;
    }

    public boolean equals(signupWithKakao_args that) {
      if (that == null)
        return false;

      boolean this_present_ko_id = true && this.isSetKo_id();
      boolean that_present_ko_id = true && that.isSetKo_id();
      if (this_present_ko_id || that_present_ko_id) {
        if (!(this_present_ko_id && that_present_ko_id))
          return false;
        if (!this.ko_id.equals(that.ko_id))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_pic_url = true && this.isSetPic_url();
      boolean that_present_pic_url = true && that.isSetPic_url();
      if (this_present_pic_url || that_present_pic_url) {
        if (!(this_present_pic_url && that_present_pic_url))
          return false;
        if (!this.pic_url.equals(that.pic_url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ko_id = true && (isSetKo_id());
      list.add(present_ko_id);
      if (present_ko_id)
        list.add(ko_id);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_pic_url = true && (isSetPic_url());
      list.add(present_pic_url);
      if (present_pic_url)
        list.add(pic_url);

      return list.hashCode();
    }

    @Override
    public int compareTo(signupWithKakao_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKo_id()).compareTo(other.isSetKo_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKo_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ko_id, other.ko_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPic_url()).compareTo(other.isSetPic_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPic_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic_url, other.pic_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signupWithKakao_args(");
      boolean first = true;

      sb.append("ko_id:");
      if (this.ko_id == null) {
        sb.append("null");
      } else {
        sb.append(this.ko_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pic_url:");
      if (this.pic_url == null) {
        sb.append("null");
      } else {
        sb.append(this.pic_url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signupWithKakao_argsStandardSchemeFactory implements SchemeFactory {
      public signupWithKakao_argsStandardScheme getScheme() {
        return new signupWithKakao_argsStandardScheme();
      }
    }

    private static class signupWithKakao_argsStandardScheme extends StandardScheme<signupWithKakao_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signupWithKakao_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KO_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ko_id = iprot.readString();
                struct.setKo_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PIC_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pic_url = iprot.readString();
                struct.setPic_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signupWithKakao_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ko_id != null) {
          oprot.writeFieldBegin(KO_ID_FIELD_DESC);
          oprot.writeString(struct.ko_id);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.pic_url != null) {
          oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
          oprot.writeString(struct.pic_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signupWithKakao_argsTupleSchemeFactory implements SchemeFactory {
      public signupWithKakao_argsTupleScheme getScheme() {
        return new signupWithKakao_argsTupleScheme();
      }
    }

    private static class signupWithKakao_argsTupleScheme extends TupleScheme<signupWithKakao_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signupWithKakao_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKo_id()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetPic_url()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKo_id()) {
          oprot.writeString(struct.ko_id);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetPic_url()) {
          oprot.writeString(struct.pic_url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signupWithKakao_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ko_id = iprot.readString();
          struct.setKo_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pic_url = iprot.readString();
          struct.setPic_urlIsSet(true);
        }
      }
    }

  }

  public static class signupWithKakao_result implements org.apache.thrift.TBase<signupWithKakao_result, signupWithKakao_result._Fields>, java.io.Serializable, Cloneable, Comparable<signupWithKakao_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signupWithKakao_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signupWithKakao_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signupWithKakao_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.User success; // required
    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.foodRecipe.core.thrift.model.user.User.class)));
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signupWithKakao_result.class, metaDataMap);
    }

    public signupWithKakao_result() {
    }

    public signupWithKakao_result(
      com.foodRecipe.core.thrift.model.user.User success,
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.success = success;
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signupWithKakao_result(signupWithKakao_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.foodRecipe.core.thrift.model.user.User(other.success);
      }
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public signupWithKakao_result deepCopy() {
      return new signupWithKakao_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.User getSuccess() {
      return this.success;
    }

    public signupWithKakao_result setSuccess(com.foodRecipe.core.thrift.model.user.User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public signupWithKakao_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.foodRecipe.core.thrift.model.user.User)value);
        }
        break;

      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signupWithKakao_result)
        return this.equals((signupWithKakao_result)that);
      return false;
    }

    public boolean equals(signupWithKakao_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(signupWithKakao_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signupWithKakao_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signupWithKakao_resultStandardSchemeFactory implements SchemeFactory {
      public signupWithKakao_resultStandardScheme getScheme() {
        return new signupWithKakao_resultStandardScheme();
      }
    }

    private static class signupWithKakao_resultStandardScheme extends StandardScheme<signupWithKakao_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signupWithKakao_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.foodRecipe.core.thrift.model.user.User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signupWithKakao_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signupWithKakao_resultTupleSchemeFactory implements SchemeFactory {
      public signupWithKakao_resultTupleScheme getScheme() {
        return new signupWithKakao_resultTupleScheme();
      }
    }

    private static class signupWithKakao_resultTupleScheme extends TupleScheme<signupWithKakao_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signupWithKakao_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signupWithKakao_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.foodRecipe.core.thrift.model.user.User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

  public static class signin_args implements org.apache.thrift.TBase<signin_args, signin_args._Fields>, java.io.Serializable, Cloneable, Comparable<signin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signin_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signin_argsTupleSchemeFactory());
    }

    public String email; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signin_args.class, metaDataMap);
    }

    public signin_args() {
    }

    public signin_args(
      String email,
      String password)
    {
      this();
      this.email = email;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signin_args(signin_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public signin_args deepCopy() {
      return new signin_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
      this.password = null;
    }

    public String getEmail() {
      return this.email;
    }

    public signin_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public signin_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signin_args)
        return this.equals((signin_args)that);
      return false;
    }

    public boolean equals(signin_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email = true && (isSetEmail());
      list.add(present_email);
      if (present_email)
        list.add(email);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(signin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signin_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signin_argsStandardSchemeFactory implements SchemeFactory {
      public signin_argsStandardScheme getScheme() {
        return new signin_argsStandardScheme();
      }
    }

    private static class signin_argsStandardScheme extends StandardScheme<signin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signin_argsTupleSchemeFactory implements SchemeFactory {
      public signin_argsTupleScheme getScheme() {
        return new signin_argsTupleScheme();
      }
    }

    private static class signin_argsTupleScheme extends TupleScheme<signin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class signin_result implements org.apache.thrift.TBase<signin_result, signin_result._Fields>, java.io.Serializable, Cloneable, Comparable<signin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signin_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.User success; // required
    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.foodRecipe.core.thrift.model.user.User.class)));
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signin_result.class, metaDataMap);
    }

    public signin_result() {
    }

    public signin_result(
      com.foodRecipe.core.thrift.model.user.User success,
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.success = success;
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signin_result(signin_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.foodRecipe.core.thrift.model.user.User(other.success);
      }
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public signin_result deepCopy() {
      return new signin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.User getSuccess() {
      return this.success;
    }

    public signin_result setSuccess(com.foodRecipe.core.thrift.model.user.User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public signin_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.foodRecipe.core.thrift.model.user.User)value);
        }
        break;

      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signin_result)
        return this.equals((signin_result)that);
      return false;
    }

    public boolean equals(signin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(signin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signin_resultStandardSchemeFactory implements SchemeFactory {
      public signin_resultStandardScheme getScheme() {
        return new signin_resultStandardScheme();
      }
    }

    private static class signin_resultStandardScheme extends StandardScheme<signin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.foodRecipe.core.thrift.model.user.User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signin_resultTupleSchemeFactory implements SchemeFactory {
      public signin_resultTupleScheme getScheme() {
        return new signin_resultTupleScheme();
      }
    }

    private static class signin_resultTupleScheme extends TupleScheme<signin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.foodRecipe.core.thrift.model.user.User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

  public static class signout_args implements org.apache.thrift.TBase<signout_args, signout_args._Fields>, java.io.Serializable, Cloneable, Comparable<signout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signout_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signout_argsTupleSchemeFactory());
    }

    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signout_args.class, metaDataMap);
    }

    public signout_args() {
    }

    public signout_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signout_args(signout_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public signout_args deepCopy() {
      return new signout_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public signout_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signout_args)
        return this.equals((signout_args)that);
      return false;
    }

    public boolean equals(signout_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(signout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signout_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signout_argsStandardSchemeFactory implements SchemeFactory {
      public signout_argsStandardScheme getScheme() {
        return new signout_argsStandardScheme();
      }
    }

    private static class signout_argsStandardScheme extends StandardScheme<signout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signout_argsTupleSchemeFactory implements SchemeFactory {
      public signout_argsTupleScheme getScheme() {
        return new signout_argsTupleScheme();
      }
    }

    private static class signout_argsTupleScheme extends TupleScheme<signout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class signout_result implements org.apache.thrift.TBase<signout_result, signout_result._Fields>, java.io.Serializable, Cloneable, Comparable<signout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signout_result");

    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signout_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signout_result.class, metaDataMap);
    }

    public signout_result() {
    }

    public signout_result(
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signout_result(signout_result other) {
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public signout_result deepCopy() {
      return new signout_result(this);
    }

    @Override
    public void clear() {
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public signout_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signout_result)
        return this.equals((signout_result)that);
      return false;
    }

    public boolean equals(signout_result that) {
      if (that == null)
        return false;

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(signout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signout_result(");
      boolean first = true;

      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signout_resultStandardSchemeFactory implements SchemeFactory {
      public signout_resultStandardScheme getScheme() {
        return new signout_resultStandardScheme();
      }
    }

    private static class signout_resultStandardScheme extends StandardScheme<signout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signout_resultTupleSchemeFactory implements SchemeFactory {
      public signout_resultTupleScheme getScheme() {
        return new signout_resultTupleScheme();
      }
    }

    private static class signout_resultTupleScheme extends TupleScheme<signout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

  public static class withdraw_args implements org.apache.thrift.TBase<withdraw_args, withdraw_args._Fields>, java.io.Serializable, Cloneable, Comparable<withdraw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdraw_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new withdraw_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new withdraw_argsTupleSchemeFactory());
    }

    public String token; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdraw_args.class, metaDataMap);
    }

    public withdraw_args() {
    }

    public withdraw_args(
      String token,
      String password)
    {
      this();
      this.token = token;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public withdraw_args(withdraw_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public withdraw_args deepCopy() {
      return new withdraw_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.password = null;
    }

    public String getToken() {
      return this.token;
    }

    public withdraw_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public withdraw_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof withdraw_args)
        return this.equals((withdraw_args)that);
      return false;
    }

    public boolean equals(withdraw_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(withdraw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("withdraw_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class withdraw_argsStandardSchemeFactory implements SchemeFactory {
      public withdraw_argsStandardScheme getScheme() {
        return new withdraw_argsStandardScheme();
      }
    }

    private static class withdraw_argsStandardScheme extends StandardScheme<withdraw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, withdraw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, withdraw_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class withdraw_argsTupleSchemeFactory implements SchemeFactory {
      public withdraw_argsTupleScheme getScheme() {
        return new withdraw_argsTupleScheme();
      }
    }

    private static class withdraw_argsTupleScheme extends TupleScheme<withdraw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, withdraw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, withdraw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class withdraw_result implements org.apache.thrift.TBase<withdraw_result, withdraw_result._Fields>, java.io.Serializable, Cloneable, Comparable<withdraw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdraw_result");

    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new withdraw_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new withdraw_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdraw_result.class, metaDataMap);
    }

    public withdraw_result() {
    }

    public withdraw_result(
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public withdraw_result(withdraw_result other) {
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public withdraw_result deepCopy() {
      return new withdraw_result(this);
    }

    @Override
    public void clear() {
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public withdraw_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof withdraw_result)
        return this.equals((withdraw_result)that);
      return false;
    }

    public boolean equals(withdraw_result that) {
      if (that == null)
        return false;

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(withdraw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("withdraw_result(");
      boolean first = true;

      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class withdraw_resultStandardSchemeFactory implements SchemeFactory {
      public withdraw_resultStandardScheme getScheme() {
        return new withdraw_resultStandardScheme();
      }
    }

    private static class withdraw_resultStandardScheme extends StandardScheme<withdraw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, withdraw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, withdraw_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class withdraw_resultTupleSchemeFactory implements SchemeFactory {
      public withdraw_resultTupleScheme getScheme() {
        return new withdraw_resultTupleScheme();
      }
    }

    private static class withdraw_resultTupleScheme extends TupleScheme<withdraw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, withdraw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, withdraw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

  public static class getUserInfo_args implements org.apache.thrift.TBase<getUserInfo_args, getUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfo_argsTupleSchemeFactory());
    }

    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_args.class, metaDataMap);
    }

    public getUserInfo_args() {
    }

    public getUserInfo_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_args(getUserInfo_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getUserInfo_args deepCopy() {
      return new getUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public getUserInfo_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfo_args)
        return this.equals((getUserInfo_args)that);
      return false;
    }

    public boolean equals(getUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getUserInfo_argsStandardScheme getScheme() {
        return new getUserInfo_argsStandardScheme();
      }
    }

    private static class getUserInfo_argsStandardScheme extends StandardScheme<getUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getUserInfo_argsTupleScheme getScheme() {
        return new getUserInfo_argsTupleScheme();
      }
    }

    private static class getUserInfo_argsTupleScheme extends TupleScheme<getUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getUserInfo_result implements org.apache.thrift.TBase<getUserInfo_result, getUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UEX_FIELD_DESC = new org.apache.thrift.protocol.TField("uex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfo_resultTupleSchemeFactory());
    }

    public com.foodRecipe.core.thrift.model.user.User success; // required
    public com.foodRecipe.core.thrift.model.user.UserException uex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UEX((short)1, "uex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UEX
            return UEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.foodRecipe.core.thrift.model.user.User.class)));
      tmpMap.put(_Fields.UEX, new org.apache.thrift.meta_data.FieldMetaData("uex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfo_result.class, metaDataMap);
    }

    public getUserInfo_result() {
    }

    public getUserInfo_result(
      com.foodRecipe.core.thrift.model.user.User success,
      com.foodRecipe.core.thrift.model.user.UserException uex)
    {
      this();
      this.success = success;
      this.uex = uex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfo_result(getUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.foodRecipe.core.thrift.model.user.User(other.success);
      }
      if (other.isSetUex()) {
        this.uex = new com.foodRecipe.core.thrift.model.user.UserException(other.uex);
      }
    }

    public getUserInfo_result deepCopy() {
      return new getUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.uex = null;
    }

    public com.foodRecipe.core.thrift.model.user.User getSuccess() {
      return this.success;
    }

    public getUserInfo_result setSuccess(com.foodRecipe.core.thrift.model.user.User success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.foodRecipe.core.thrift.model.user.UserException getUex() {
      return this.uex;
    }

    public getUserInfo_result setUex(com.foodRecipe.core.thrift.model.user.UserException uex) {
      this.uex = uex;
      return this;
    }

    public void unsetUex() {
      this.uex = null;
    }

    /** Returns true if field uex is set (has been assigned a value) and false otherwise */
    public boolean isSetUex() {
      return this.uex != null;
    }

    public void setUexIsSet(boolean value) {
      if (!value) {
        this.uex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.foodRecipe.core.thrift.model.user.User)value);
        }
        break;

      case UEX:
        if (value == null) {
          unsetUex();
        } else {
          setUex((com.foodRecipe.core.thrift.model.user.UserException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UEX:
        return getUex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UEX:
        return isSetUex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfo_result)
        return this.equals((getUserInfo_result)that);
      return false;
    }

    public boolean equals(getUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_uex = true && this.isSetUex();
      boolean that_present_uex = true && that.isSetUex();
      if (this_present_uex || that_present_uex) {
        if (!(this_present_uex && that_present_uex))
          return false;
        if (!this.uex.equals(that.uex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_uex = true && (isSetUex());
      list.add(present_uex);
      if (present_uex)
        list.add(uex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUex()).compareTo(other.isSetUex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uex, other.uex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uex:");
      if (this.uex == null) {
        sb.append("null");
      } else {
        sb.append(this.uex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getUserInfo_resultStandardScheme getScheme() {
        return new getUserInfo_resultStandardScheme();
      }
    }

    private static class getUserInfo_resultStandardScheme extends StandardScheme<getUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.foodRecipe.core.thrift.model.user.User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
                struct.uex.read(iprot);
                struct.setUexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uex != null) {
          oprot.writeFieldBegin(UEX_FIELD_DESC);
          struct.uex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getUserInfo_resultTupleScheme getScheme() {
        return new getUserInfo_resultTupleScheme();
      }
    }

    private static class getUserInfo_resultTupleScheme extends TupleScheme<getUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUex()) {
          struct.uex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.foodRecipe.core.thrift.model.user.User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uex = new com.foodRecipe.core.thrift.model.user.UserException();
          struct.uex.read(iprot);
          struct.setUexIsSet(true);
        }
      }
    }

  }

}
