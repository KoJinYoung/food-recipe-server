/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foodRecipe.core.thrift.model.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Basic unit of user's information
 * @param uid. unique id
 * @param name.
 * @param auth_method. The method which are certificated. This value is binary. It consists of AUTH_METHOD.
 * @param facebookId. It can be null.
 * @param kakaoId. It can be null.
 * @param email. It can be null.
 * @param pic. The url of profile image.
 * @param follower. The number of follower.
 * @param following. The number of following who.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-24")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTH_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_method", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FACEBOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("facebookId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField KAKAO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("kakaoId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("pic", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FOLLOWER_FIELD_DESC = new org.apache.thrift.protocol.TField("follower", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FOLLOWING_FIELD_DESC = new org.apache.thrift.protocol.TField("following", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SIGNUP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("signup_status", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public int uid; // optional
  public String token; // optional
  public String username; // optional
  public int auth_method; // optional
  public String facebookId; // optional
  public String kakaoId; // optional
  public String email; // optional
  public String pic; // optional
  public int follower; // optional
  public int following; // optional
  /**
   * 
   * @see SIGNUP_STATUS
   */
  public SIGNUP_STATUS signup_status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    TOKEN((short)2, "token"),
    USERNAME((short)3, "username"),
    AUTH_METHOD((short)4, "auth_method"),
    FACEBOOK_ID((short)5, "facebookId"),
    KAKAO_ID((short)6, "kakaoId"),
    EMAIL((short)7, "email"),
    PIC((short)8, "pic"),
    FOLLOWER((short)9, "follower"),
    FOLLOWING((short)10, "following"),
    /**
     * 
     * @see SIGNUP_STATUS
     */
    SIGNUP_STATUS((short)11, "signup_status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // TOKEN
          return TOKEN;
        case 3: // USERNAME
          return USERNAME;
        case 4: // AUTH_METHOD
          return AUTH_METHOD;
        case 5: // FACEBOOK_ID
          return FACEBOOK_ID;
        case 6: // KAKAO_ID
          return KAKAO_ID;
        case 7: // EMAIL
          return EMAIL;
        case 8: // PIC
          return PIC;
        case 9: // FOLLOWER
          return FOLLOWER;
        case 10: // FOLLOWING
          return FOLLOWING;
        case 11: // SIGNUP_STATUS
          return SIGNUP_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __AUTH_METHOD_ISSET_ID = 1;
  private static final int __FOLLOWER_ISSET_ID = 2;
  private static final int __FOLLOWING_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UID,_Fields.TOKEN,_Fields.USERNAME,_Fields.AUTH_METHOD,_Fields.FACEBOOK_ID,_Fields.KAKAO_ID,_Fields.EMAIL,_Fields.PIC,_Fields.FOLLOWER,_Fields.FOLLOWING,_Fields.SIGNUP_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_METHOD, new org.apache.thrift.meta_data.FieldMetaData("auth_method", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FACEBOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("facebookId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KAKAO_ID, new org.apache.thrift.meta_data.FieldMetaData("kakaoId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC, new org.apache.thrift.meta_data.FieldMetaData("pic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOLLOWER, new org.apache.thrift.meta_data.FieldMetaData("follower", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FOLLOWING, new org.apache.thrift.meta_data.FieldMetaData("following", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SIGNUP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("signup_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SIGNUP_STATUS.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.auth_method = other.auth_method;
    if (other.isSetFacebookId()) {
      this.facebookId = other.facebookId;
    }
    if (other.isSetKakaoId()) {
      this.kakaoId = other.kakaoId;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPic()) {
      this.pic = other.pic;
    }
    this.follower = other.follower;
    this.following = other.following;
    if (other.isSetSignup_status()) {
      this.signup_status = other.signup_status;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    this.token = null;
    this.username = null;
    setAuth_methodIsSet(false);
    this.auth_method = 0;
    this.facebookId = null;
    this.kakaoId = null;
    this.email = null;
    this.pic = null;
    setFollowerIsSet(false);
    this.follower = 0;
    setFollowingIsSet(false);
    this.following = 0;
    this.signup_status = null;
  }

  public int getUid() {
    return this.uid;
  }

  public User setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getToken() {
    return this.token;
  }

  public User setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public User setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public int getAuth_method() {
    return this.auth_method;
  }

  public User setAuth_method(int auth_method) {
    this.auth_method = auth_method;
    setAuth_methodIsSet(true);
    return this;
  }

  public void unsetAuth_method() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTH_METHOD_ISSET_ID);
  }

  /** Returns true if field auth_method is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_method() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTH_METHOD_ISSET_ID);
  }

  public void setAuth_methodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTH_METHOD_ISSET_ID, value);
  }

  public String getFacebookId() {
    return this.facebookId;
  }

  public User setFacebookId(String facebookId) {
    this.facebookId = facebookId;
    return this;
  }

  public void unsetFacebookId() {
    this.facebookId = null;
  }

  /** Returns true if field facebookId is set (has been assigned a value) and false otherwise */
  public boolean isSetFacebookId() {
    return this.facebookId != null;
  }

  public void setFacebookIdIsSet(boolean value) {
    if (!value) {
      this.facebookId = null;
    }
  }

  public String getKakaoId() {
    return this.kakaoId;
  }

  public User setKakaoId(String kakaoId) {
    this.kakaoId = kakaoId;
    return this;
  }

  public void unsetKakaoId() {
    this.kakaoId = null;
  }

  /** Returns true if field kakaoId is set (has been assigned a value) and false otherwise */
  public boolean isSetKakaoId() {
    return this.kakaoId != null;
  }

  public void setKakaoIdIsSet(boolean value) {
    if (!value) {
      this.kakaoId = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public User setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPic() {
    return this.pic;
  }

  public User setPic(String pic) {
    this.pic = pic;
    return this;
  }

  public void unsetPic() {
    this.pic = null;
  }

  /** Returns true if field pic is set (has been assigned a value) and false otherwise */
  public boolean isSetPic() {
    return this.pic != null;
  }

  public void setPicIsSet(boolean value) {
    if (!value) {
      this.pic = null;
    }
  }

  public int getFollower() {
    return this.follower;
  }

  public User setFollower(int follower) {
    this.follower = follower;
    setFollowerIsSet(true);
    return this;
  }

  public void unsetFollower() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWER_ISSET_ID);
  }

  /** Returns true if field follower is set (has been assigned a value) and false otherwise */
  public boolean isSetFollower() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWER_ISSET_ID);
  }

  public void setFollowerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWER_ISSET_ID, value);
  }

  public int getFollowing() {
    return this.following;
  }

  public User setFollowing(int following) {
    this.following = following;
    setFollowingIsSet(true);
    return this;
  }

  public void unsetFollowing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWING_ISSET_ID);
  }

  /** Returns true if field following is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowing() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWING_ISSET_ID);
  }

  public void setFollowingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWING_ISSET_ID, value);
  }

  /**
   * 
   * @see SIGNUP_STATUS
   */
  public SIGNUP_STATUS getSignup_status() {
    return this.signup_status;
  }

  /**
   * 
   * @see SIGNUP_STATUS
   */
  public User setSignup_status(SIGNUP_STATUS signup_status) {
    this.signup_status = signup_status;
    return this;
  }

  public void unsetSignup_status() {
    this.signup_status = null;
  }

  /** Returns true if field signup_status is set (has been assigned a value) and false otherwise */
  public boolean isSetSignup_status() {
    return this.signup_status != null;
  }

  public void setSignup_statusIsSet(boolean value) {
    if (!value) {
      this.signup_status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case AUTH_METHOD:
      if (value == null) {
        unsetAuth_method();
      } else {
        setAuth_method((Integer)value);
      }
      break;

    case FACEBOOK_ID:
      if (value == null) {
        unsetFacebookId();
      } else {
        setFacebookId((String)value);
      }
      break;

    case KAKAO_ID:
      if (value == null) {
        unsetKakaoId();
      } else {
        setKakaoId((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PIC:
      if (value == null) {
        unsetPic();
      } else {
        setPic((String)value);
      }
      break;

    case FOLLOWER:
      if (value == null) {
        unsetFollower();
      } else {
        setFollower((Integer)value);
      }
      break;

    case FOLLOWING:
      if (value == null) {
        unsetFollowing();
      } else {
        setFollowing((Integer)value);
      }
      break;

    case SIGNUP_STATUS:
      if (value == null) {
        unsetSignup_status();
      } else {
        setSignup_status((SIGNUP_STATUS)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return Integer.valueOf(getUid());

    case TOKEN:
      return getToken();

    case USERNAME:
      return getUsername();

    case AUTH_METHOD:
      return Integer.valueOf(getAuth_method());

    case FACEBOOK_ID:
      return getFacebookId();

    case KAKAO_ID:
      return getKakaoId();

    case EMAIL:
      return getEmail();

    case PIC:
      return getPic();

    case FOLLOWER:
      return Integer.valueOf(getFollower());

    case FOLLOWING:
      return Integer.valueOf(getFollowing());

    case SIGNUP_STATUS:
      return getSignup_status();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case TOKEN:
      return isSetToken();
    case USERNAME:
      return isSetUsername();
    case AUTH_METHOD:
      return isSetAuth_method();
    case FACEBOOK_ID:
      return isSetFacebookId();
    case KAKAO_ID:
      return isSetKakaoId();
    case EMAIL:
      return isSetEmail();
    case PIC:
      return isSetPic();
    case FOLLOWER:
      return isSetFollower();
    case FOLLOWING:
      return isSetFollowing();
    case SIGNUP_STATUS:
      return isSetSignup_status();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_auth_method = true && this.isSetAuth_method();
    boolean that_present_auth_method = true && that.isSetAuth_method();
    if (this_present_auth_method || that_present_auth_method) {
      if (!(this_present_auth_method && that_present_auth_method))
        return false;
      if (this.auth_method != that.auth_method)
        return false;
    }

    boolean this_present_facebookId = true && this.isSetFacebookId();
    boolean that_present_facebookId = true && that.isSetFacebookId();
    if (this_present_facebookId || that_present_facebookId) {
      if (!(this_present_facebookId && that_present_facebookId))
        return false;
      if (!this.facebookId.equals(that.facebookId))
        return false;
    }

    boolean this_present_kakaoId = true && this.isSetKakaoId();
    boolean that_present_kakaoId = true && that.isSetKakaoId();
    if (this_present_kakaoId || that_present_kakaoId) {
      if (!(this_present_kakaoId && that_present_kakaoId))
        return false;
      if (!this.kakaoId.equals(that.kakaoId))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_pic = true && this.isSetPic();
    boolean that_present_pic = true && that.isSetPic();
    if (this_present_pic || that_present_pic) {
      if (!(this_present_pic && that_present_pic))
        return false;
      if (!this.pic.equals(that.pic))
        return false;
    }

    boolean this_present_follower = true && this.isSetFollower();
    boolean that_present_follower = true && that.isSetFollower();
    if (this_present_follower || that_present_follower) {
      if (!(this_present_follower && that_present_follower))
        return false;
      if (this.follower != that.follower)
        return false;
    }

    boolean this_present_following = true && this.isSetFollowing();
    boolean that_present_following = true && that.isSetFollowing();
    if (this_present_following || that_present_following) {
      if (!(this_present_following && that_present_following))
        return false;
      if (this.following != that.following)
        return false;
    }

    boolean this_present_signup_status = true && this.isSetSignup_status();
    boolean that_present_signup_status = true && that.isSetSignup_status();
    if (this_present_signup_status || that_present_signup_status) {
      if (!(this_present_signup_status && that_present_signup_status))
        return false;
      if (!this.signup_status.equals(that.signup_status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_auth_method = true && (isSetAuth_method());
    list.add(present_auth_method);
    if (present_auth_method)
      list.add(auth_method);

    boolean present_facebookId = true && (isSetFacebookId());
    list.add(present_facebookId);
    if (present_facebookId)
      list.add(facebookId);

    boolean present_kakaoId = true && (isSetKakaoId());
    list.add(present_kakaoId);
    if (present_kakaoId)
      list.add(kakaoId);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_pic = true && (isSetPic());
    list.add(present_pic);
    if (present_pic)
      list.add(pic);

    boolean present_follower = true && (isSetFollower());
    list.add(present_follower);
    if (present_follower)
      list.add(follower);

    boolean present_following = true && (isSetFollowing());
    list.add(present_following);
    if (present_following)
      list.add(following);

    boolean present_signup_status = true && (isSetSignup_status());
    list.add(present_signup_status);
    if (present_signup_status)
      list.add(signup_status.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuth_method()).compareTo(other.isSetAuth_method());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_method()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_method, other.auth_method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacebookId()).compareTo(other.isSetFacebookId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacebookId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facebookId, other.facebookId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKakaoId()).compareTo(other.isSetKakaoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKakaoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kakaoId, other.kakaoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPic()).compareTo(other.isSetPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic, other.pic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollower()).compareTo(other.isSetFollower());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollower()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.follower, other.follower);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowing()).compareTo(other.isSetFollowing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.following, other.following);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignup_status()).compareTo(other.isSetSignup_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignup_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signup_status, other.signup_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    if (isSetUid()) {
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetAuth_method()) {
      if (!first) sb.append(", ");
      sb.append("auth_method:");
      sb.append(this.auth_method);
      first = false;
    }
    if (isSetFacebookId()) {
      if (!first) sb.append(", ");
      sb.append("facebookId:");
      if (this.facebookId == null) {
        sb.append("null");
      } else {
        sb.append(this.facebookId);
      }
      first = false;
    }
    if (isSetKakaoId()) {
      if (!first) sb.append(", ");
      sb.append("kakaoId:");
      if (this.kakaoId == null) {
        sb.append("null");
      } else {
        sb.append(this.kakaoId);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetPic()) {
      if (!first) sb.append(", ");
      sb.append("pic:");
      if (this.pic == null) {
        sb.append("null");
      } else {
        sb.append(this.pic);
      }
      first = false;
    }
    if (isSetFollower()) {
      if (!first) sb.append(", ");
      sb.append("follower:");
      sb.append(this.follower);
      first = false;
    }
    if (isSetFollowing()) {
      if (!first) sb.append(", ");
      sb.append("following:");
      sb.append(this.following);
      first = false;
    }
    if (isSetSignup_status()) {
      if (!first) sb.append(", ");
      sb.append("signup_status:");
      if (this.signup_status == null) {
        sb.append("null");
      } else {
        sb.append(this.signup_status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTH_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auth_method = iprot.readI32();
              struct.setAuth_methodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACEBOOK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.facebookId = iprot.readString();
              struct.setFacebookIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KAKAO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kakaoId = iprot.readString();
              struct.setKakaoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pic = iprot.readString();
              struct.setPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FOLLOWER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.follower = iprot.readI32();
              struct.setFollowerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FOLLOWING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.following = iprot.readI32();
              struct.setFollowingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SIGNUP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signup_status = com.foodRecipe.core.thrift.model.user.SIGNUP_STATUS.findByValue(iprot.readI32());
              struct.setSignup_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUid()) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuth_method()) {
        oprot.writeFieldBegin(AUTH_METHOD_FIELD_DESC);
        oprot.writeI32(struct.auth_method);
        oprot.writeFieldEnd();
      }
      if (struct.facebookId != null) {
        if (struct.isSetFacebookId()) {
          oprot.writeFieldBegin(FACEBOOK_ID_FIELD_DESC);
          oprot.writeString(struct.facebookId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kakaoId != null) {
        if (struct.isSetKakaoId()) {
          oprot.writeFieldBegin(KAKAO_ID_FIELD_DESC);
          oprot.writeString(struct.kakaoId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pic != null) {
        if (struct.isSetPic()) {
          oprot.writeFieldBegin(PIC_FIELD_DESC);
          oprot.writeString(struct.pic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFollower()) {
        oprot.writeFieldBegin(FOLLOWER_FIELD_DESC);
        oprot.writeI32(struct.follower);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFollowing()) {
        oprot.writeFieldBegin(FOLLOWING_FIELD_DESC);
        oprot.writeI32(struct.following);
        oprot.writeFieldEnd();
      }
      if (struct.signup_status != null) {
        if (struct.isSetSignup_status()) {
          oprot.writeFieldBegin(SIGNUP_STATUS_FIELD_DESC);
          oprot.writeI32(struct.signup_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetToken()) {
        optionals.set(1);
      }
      if (struct.isSetUsername()) {
        optionals.set(2);
      }
      if (struct.isSetAuth_method()) {
        optionals.set(3);
      }
      if (struct.isSetFacebookId()) {
        optionals.set(4);
      }
      if (struct.isSetKakaoId()) {
        optionals.set(5);
      }
      if (struct.isSetEmail()) {
        optionals.set(6);
      }
      if (struct.isSetPic()) {
        optionals.set(7);
      }
      if (struct.isSetFollower()) {
        optionals.set(8);
      }
      if (struct.isSetFollowing()) {
        optionals.set(9);
      }
      if (struct.isSetSignup_status()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetAuth_method()) {
        oprot.writeI32(struct.auth_method);
      }
      if (struct.isSetFacebookId()) {
        oprot.writeString(struct.facebookId);
      }
      if (struct.isSetKakaoId()) {
        oprot.writeString(struct.kakaoId);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPic()) {
        oprot.writeString(struct.pic);
      }
      if (struct.isSetFollower()) {
        oprot.writeI32(struct.follower);
      }
      if (struct.isSetFollowing()) {
        oprot.writeI32(struct.following);
      }
      if (struct.isSetSignup_status()) {
        oprot.writeI32(struct.signup_status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.auth_method = iprot.readI32();
        struct.setAuth_methodIsSet(true);
      }
      if (incoming.get(4)) {
        struct.facebookId = iprot.readString();
        struct.setFacebookIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.kakaoId = iprot.readString();
        struct.setKakaoIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pic = iprot.readString();
        struct.setPicIsSet(true);
      }
      if (incoming.get(8)) {
        struct.follower = iprot.readI32();
        struct.setFollowerIsSet(true);
      }
      if (incoming.get(9)) {
        struct.following = iprot.readI32();
        struct.setFollowingIsSet(true);
      }
      if (incoming.get(10)) {
        struct.signup_status = com.foodRecipe.core.thrift.model.user.SIGNUP_STATUS.findByValue(iprot.readI32());
        struct.setSignup_statusIsSet(true);
      }
    }
  }

}

