/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foodRecipe.core.thrift.model.recipe;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-18")
public class Recipe implements org.apache.thrift.TBase<Recipe, Recipe._Fields>, java.io.Serializable, Cloneable, Comparable<Recipe> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Recipe");

  private static final org.apache.thrift.protocol.TField RECIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recipeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WRITER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("writerId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WRITER_PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("writerPic", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WRITER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("writerName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RECIPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recipeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECIPE_PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("recipePic", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RECIPE_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("recipeComment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RECIPE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("recipeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField RECIPE_LIKED_FIELD_DESC = new org.apache.thrift.protocol.TField("recipeLiked", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RECIPE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("recipeType", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecipeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecipeTupleSchemeFactory());
  }

  public int recipeId; // optional
  public int writerId; // optional
  public String writerPic; // optional
  public String writerName; // optional
  public String recipeName; // optional
  public String recipePic; // optional
  public String recipeComment; // optional
  public RecipeInfo recipeInfo; // optional
  public boolean recipeLiked; // optional
  /**
   * 
   * @see RECIPETYPE
   */
  public RECIPETYPE recipeType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECIPE_ID((short)1, "recipeId"),
    WRITER_ID((short)2, "writerId"),
    WRITER_PIC((short)3, "writerPic"),
    WRITER_NAME((short)4, "writerName"),
    RECIPE_NAME((short)5, "recipeName"),
    RECIPE_PIC((short)6, "recipePic"),
    RECIPE_COMMENT((short)7, "recipeComment"),
    RECIPE_INFO((short)8, "recipeInfo"),
    RECIPE_LIKED((short)9, "recipeLiked"),
    /**
     * 
     * @see RECIPETYPE
     */
    RECIPE_TYPE((short)10, "recipeType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECIPE_ID
          return RECIPE_ID;
        case 2: // WRITER_ID
          return WRITER_ID;
        case 3: // WRITER_PIC
          return WRITER_PIC;
        case 4: // WRITER_NAME
          return WRITER_NAME;
        case 5: // RECIPE_NAME
          return RECIPE_NAME;
        case 6: // RECIPE_PIC
          return RECIPE_PIC;
        case 7: // RECIPE_COMMENT
          return RECIPE_COMMENT;
        case 8: // RECIPE_INFO
          return RECIPE_INFO;
        case 9: // RECIPE_LIKED
          return RECIPE_LIKED;
        case 10: // RECIPE_TYPE
          return RECIPE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECIPEID_ISSET_ID = 0;
  private static final int __WRITERID_ISSET_ID = 1;
  private static final int __RECIPELIKED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RECIPE_ID,_Fields.WRITER_ID,_Fields.WRITER_PIC,_Fields.WRITER_NAME,_Fields.RECIPE_NAME,_Fields.RECIPE_PIC,_Fields.RECIPE_COMMENT,_Fields.RECIPE_INFO,_Fields.RECIPE_LIKED,_Fields.RECIPE_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("recipeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.WRITER_ID, new org.apache.thrift.meta_data.FieldMetaData("writerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.WRITER_PIC, new org.apache.thrift.meta_data.FieldMetaData("writerPic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITER_NAME, new org.apache.thrift.meta_data.FieldMetaData("writerName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECIPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("recipeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECIPE_PIC, new org.apache.thrift.meta_data.FieldMetaData("recipePic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECIPE_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("recipeComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECIPE_INFO, new org.apache.thrift.meta_data.FieldMetaData("recipeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecipeInfo.class)));
    tmpMap.put(_Fields.RECIPE_LIKED, new org.apache.thrift.meta_data.FieldMetaData("recipeLiked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RECIPE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("recipeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RECIPETYPE.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Recipe.class, metaDataMap);
  }

  public Recipe() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Recipe(Recipe other) {
    __isset_bitfield = other.__isset_bitfield;
    this.recipeId = other.recipeId;
    this.writerId = other.writerId;
    if (other.isSetWriterPic()) {
      this.writerPic = other.writerPic;
    }
    if (other.isSetWriterName()) {
      this.writerName = other.writerName;
    }
    if (other.isSetRecipeName()) {
      this.recipeName = other.recipeName;
    }
    if (other.isSetRecipePic()) {
      this.recipePic = other.recipePic;
    }
    if (other.isSetRecipeComment()) {
      this.recipeComment = other.recipeComment;
    }
    if (other.isSetRecipeInfo()) {
      this.recipeInfo = new RecipeInfo(other.recipeInfo);
    }
    this.recipeLiked = other.recipeLiked;
    if (other.isSetRecipeType()) {
      this.recipeType = other.recipeType;
    }
  }

  public Recipe deepCopy() {
    return new Recipe(this);
  }

  @Override
  public void clear() {
    setRecipeIdIsSet(false);
    this.recipeId = 0;
    setWriterIdIsSet(false);
    this.writerId = 0;
    this.writerPic = null;
    this.writerName = null;
    this.recipeName = null;
    this.recipePic = null;
    this.recipeComment = null;
    this.recipeInfo = null;
    setRecipeLikedIsSet(false);
    this.recipeLiked = false;
    this.recipeType = null;
  }

  public int getRecipeId() {
    return this.recipeId;
  }

  public Recipe setRecipeId(int recipeId) {
    this.recipeId = recipeId;
    setRecipeIdIsSet(true);
    return this;
  }

  public void unsetRecipeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIPEID_ISSET_ID);
  }

  /** Returns true if field recipeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipeId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECIPEID_ISSET_ID);
  }

  public void setRecipeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIPEID_ISSET_ID, value);
  }

  public int getWriterId() {
    return this.writerId;
  }

  public Recipe setWriterId(int writerId) {
    this.writerId = writerId;
    setWriterIdIsSet(true);
    return this;
  }

  public void unsetWriterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITERID_ISSET_ID);
  }

  /** Returns true if field writerId is set (has been assigned a value) and false otherwise */
  public boolean isSetWriterId() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITERID_ISSET_ID);
  }

  public void setWriterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITERID_ISSET_ID, value);
  }

  public String getWriterPic() {
    return this.writerPic;
  }

  public Recipe setWriterPic(String writerPic) {
    this.writerPic = writerPic;
    return this;
  }

  public void unsetWriterPic() {
    this.writerPic = null;
  }

  /** Returns true if field writerPic is set (has been assigned a value) and false otherwise */
  public boolean isSetWriterPic() {
    return this.writerPic != null;
  }

  public void setWriterPicIsSet(boolean value) {
    if (!value) {
      this.writerPic = null;
    }
  }

  public String getWriterName() {
    return this.writerName;
  }

  public Recipe setWriterName(String writerName) {
    this.writerName = writerName;
    return this;
  }

  public void unsetWriterName() {
    this.writerName = null;
  }

  /** Returns true if field writerName is set (has been assigned a value) and false otherwise */
  public boolean isSetWriterName() {
    return this.writerName != null;
  }

  public void setWriterNameIsSet(boolean value) {
    if (!value) {
      this.writerName = null;
    }
  }

  public String getRecipeName() {
    return this.recipeName;
  }

  public Recipe setRecipeName(String recipeName) {
    this.recipeName = recipeName;
    return this;
  }

  public void unsetRecipeName() {
    this.recipeName = null;
  }

  /** Returns true if field recipeName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipeName() {
    return this.recipeName != null;
  }

  public void setRecipeNameIsSet(boolean value) {
    if (!value) {
      this.recipeName = null;
    }
  }

  public String getRecipePic() {
    return this.recipePic;
  }

  public Recipe setRecipePic(String recipePic) {
    this.recipePic = recipePic;
    return this;
  }

  public void unsetRecipePic() {
    this.recipePic = null;
  }

  /** Returns true if field recipePic is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipePic() {
    return this.recipePic != null;
  }

  public void setRecipePicIsSet(boolean value) {
    if (!value) {
      this.recipePic = null;
    }
  }

  public String getRecipeComment() {
    return this.recipeComment;
  }

  public Recipe setRecipeComment(String recipeComment) {
    this.recipeComment = recipeComment;
    return this;
  }

  public void unsetRecipeComment() {
    this.recipeComment = null;
  }

  /** Returns true if field recipeComment is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipeComment() {
    return this.recipeComment != null;
  }

  public void setRecipeCommentIsSet(boolean value) {
    if (!value) {
      this.recipeComment = null;
    }
  }

  public RecipeInfo getRecipeInfo() {
    return this.recipeInfo;
  }

  public Recipe setRecipeInfo(RecipeInfo recipeInfo) {
    this.recipeInfo = recipeInfo;
    return this;
  }

  public void unsetRecipeInfo() {
    this.recipeInfo = null;
  }

  /** Returns true if field recipeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipeInfo() {
    return this.recipeInfo != null;
  }

  public void setRecipeInfoIsSet(boolean value) {
    if (!value) {
      this.recipeInfo = null;
    }
  }

  public boolean isRecipeLiked() {
    return this.recipeLiked;
  }

  public Recipe setRecipeLiked(boolean recipeLiked) {
    this.recipeLiked = recipeLiked;
    setRecipeLikedIsSet(true);
    return this;
  }

  public void unsetRecipeLiked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIPELIKED_ISSET_ID);
  }

  /** Returns true if field recipeLiked is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipeLiked() {
    return EncodingUtils.testBit(__isset_bitfield, __RECIPELIKED_ISSET_ID);
  }

  public void setRecipeLikedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIPELIKED_ISSET_ID, value);
  }

  /**
   * 
   * @see RECIPETYPE
   */
  public RECIPETYPE getRecipeType() {
    return this.recipeType;
  }

  /**
   * 
   * @see RECIPETYPE
   */
  public Recipe setRecipeType(RECIPETYPE recipeType) {
    this.recipeType = recipeType;
    return this;
  }

  public void unsetRecipeType() {
    this.recipeType = null;
  }

  /** Returns true if field recipeType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipeType() {
    return this.recipeType != null;
  }

  public void setRecipeTypeIsSet(boolean value) {
    if (!value) {
      this.recipeType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECIPE_ID:
      if (value == null) {
        unsetRecipeId();
      } else {
        setRecipeId((Integer)value);
      }
      break;

    case WRITER_ID:
      if (value == null) {
        unsetWriterId();
      } else {
        setWriterId((Integer)value);
      }
      break;

    case WRITER_PIC:
      if (value == null) {
        unsetWriterPic();
      } else {
        setWriterPic((String)value);
      }
      break;

    case WRITER_NAME:
      if (value == null) {
        unsetWriterName();
      } else {
        setWriterName((String)value);
      }
      break;

    case RECIPE_NAME:
      if (value == null) {
        unsetRecipeName();
      } else {
        setRecipeName((String)value);
      }
      break;

    case RECIPE_PIC:
      if (value == null) {
        unsetRecipePic();
      } else {
        setRecipePic((String)value);
      }
      break;

    case RECIPE_COMMENT:
      if (value == null) {
        unsetRecipeComment();
      } else {
        setRecipeComment((String)value);
      }
      break;

    case RECIPE_INFO:
      if (value == null) {
        unsetRecipeInfo();
      } else {
        setRecipeInfo((RecipeInfo)value);
      }
      break;

    case RECIPE_LIKED:
      if (value == null) {
        unsetRecipeLiked();
      } else {
        setRecipeLiked((Boolean)value);
      }
      break;

    case RECIPE_TYPE:
      if (value == null) {
        unsetRecipeType();
      } else {
        setRecipeType((RECIPETYPE)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECIPE_ID:
      return Integer.valueOf(getRecipeId());

    case WRITER_ID:
      return Integer.valueOf(getWriterId());

    case WRITER_PIC:
      return getWriterPic();

    case WRITER_NAME:
      return getWriterName();

    case RECIPE_NAME:
      return getRecipeName();

    case RECIPE_PIC:
      return getRecipePic();

    case RECIPE_COMMENT:
      return getRecipeComment();

    case RECIPE_INFO:
      return getRecipeInfo();

    case RECIPE_LIKED:
      return Boolean.valueOf(isRecipeLiked());

    case RECIPE_TYPE:
      return getRecipeType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECIPE_ID:
      return isSetRecipeId();
    case WRITER_ID:
      return isSetWriterId();
    case WRITER_PIC:
      return isSetWriterPic();
    case WRITER_NAME:
      return isSetWriterName();
    case RECIPE_NAME:
      return isSetRecipeName();
    case RECIPE_PIC:
      return isSetRecipePic();
    case RECIPE_COMMENT:
      return isSetRecipeComment();
    case RECIPE_INFO:
      return isSetRecipeInfo();
    case RECIPE_LIKED:
      return isSetRecipeLiked();
    case RECIPE_TYPE:
      return isSetRecipeType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Recipe)
      return this.equals((Recipe)that);
    return false;
  }

  public boolean equals(Recipe that) {
    if (that == null)
      return false;

    boolean this_present_recipeId = true && this.isSetRecipeId();
    boolean that_present_recipeId = true && that.isSetRecipeId();
    if (this_present_recipeId || that_present_recipeId) {
      if (!(this_present_recipeId && that_present_recipeId))
        return false;
      if (this.recipeId != that.recipeId)
        return false;
    }

    boolean this_present_writerId = true && this.isSetWriterId();
    boolean that_present_writerId = true && that.isSetWriterId();
    if (this_present_writerId || that_present_writerId) {
      if (!(this_present_writerId && that_present_writerId))
        return false;
      if (this.writerId != that.writerId)
        return false;
    }

    boolean this_present_writerPic = true && this.isSetWriterPic();
    boolean that_present_writerPic = true && that.isSetWriterPic();
    if (this_present_writerPic || that_present_writerPic) {
      if (!(this_present_writerPic && that_present_writerPic))
        return false;
      if (!this.writerPic.equals(that.writerPic))
        return false;
    }

    boolean this_present_writerName = true && this.isSetWriterName();
    boolean that_present_writerName = true && that.isSetWriterName();
    if (this_present_writerName || that_present_writerName) {
      if (!(this_present_writerName && that_present_writerName))
        return false;
      if (!this.writerName.equals(that.writerName))
        return false;
    }

    boolean this_present_recipeName = true && this.isSetRecipeName();
    boolean that_present_recipeName = true && that.isSetRecipeName();
    if (this_present_recipeName || that_present_recipeName) {
      if (!(this_present_recipeName && that_present_recipeName))
        return false;
      if (!this.recipeName.equals(that.recipeName))
        return false;
    }

    boolean this_present_recipePic = true && this.isSetRecipePic();
    boolean that_present_recipePic = true && that.isSetRecipePic();
    if (this_present_recipePic || that_present_recipePic) {
      if (!(this_present_recipePic && that_present_recipePic))
        return false;
      if (!this.recipePic.equals(that.recipePic))
        return false;
    }

    boolean this_present_recipeComment = true && this.isSetRecipeComment();
    boolean that_present_recipeComment = true && that.isSetRecipeComment();
    if (this_present_recipeComment || that_present_recipeComment) {
      if (!(this_present_recipeComment && that_present_recipeComment))
        return false;
      if (!this.recipeComment.equals(that.recipeComment))
        return false;
    }

    boolean this_present_recipeInfo = true && this.isSetRecipeInfo();
    boolean that_present_recipeInfo = true && that.isSetRecipeInfo();
    if (this_present_recipeInfo || that_present_recipeInfo) {
      if (!(this_present_recipeInfo && that_present_recipeInfo))
        return false;
      if (!this.recipeInfo.equals(that.recipeInfo))
        return false;
    }

    boolean this_present_recipeLiked = true && this.isSetRecipeLiked();
    boolean that_present_recipeLiked = true && that.isSetRecipeLiked();
    if (this_present_recipeLiked || that_present_recipeLiked) {
      if (!(this_present_recipeLiked && that_present_recipeLiked))
        return false;
      if (this.recipeLiked != that.recipeLiked)
        return false;
    }

    boolean this_present_recipeType = true && this.isSetRecipeType();
    boolean that_present_recipeType = true && that.isSetRecipeType();
    if (this_present_recipeType || that_present_recipeType) {
      if (!(this_present_recipeType && that_present_recipeType))
        return false;
      if (!this.recipeType.equals(that.recipeType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_recipeId = true && (isSetRecipeId());
    list.add(present_recipeId);
    if (present_recipeId)
      list.add(recipeId);

    boolean present_writerId = true && (isSetWriterId());
    list.add(present_writerId);
    if (present_writerId)
      list.add(writerId);

    boolean present_writerPic = true && (isSetWriterPic());
    list.add(present_writerPic);
    if (present_writerPic)
      list.add(writerPic);

    boolean present_writerName = true && (isSetWriterName());
    list.add(present_writerName);
    if (present_writerName)
      list.add(writerName);

    boolean present_recipeName = true && (isSetRecipeName());
    list.add(present_recipeName);
    if (present_recipeName)
      list.add(recipeName);

    boolean present_recipePic = true && (isSetRecipePic());
    list.add(present_recipePic);
    if (present_recipePic)
      list.add(recipePic);

    boolean present_recipeComment = true && (isSetRecipeComment());
    list.add(present_recipeComment);
    if (present_recipeComment)
      list.add(recipeComment);

    boolean present_recipeInfo = true && (isSetRecipeInfo());
    list.add(present_recipeInfo);
    if (present_recipeInfo)
      list.add(recipeInfo);

    boolean present_recipeLiked = true && (isSetRecipeLiked());
    list.add(present_recipeLiked);
    if (present_recipeLiked)
      list.add(recipeLiked);

    boolean present_recipeType = true && (isSetRecipeType());
    list.add(present_recipeType);
    if (present_recipeType)
      list.add(recipeType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Recipe other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRecipeId()).compareTo(other.isSetRecipeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipeId, other.recipeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriterId()).compareTo(other.isSetWriterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writerId, other.writerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriterPic()).compareTo(other.isSetWriterPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriterPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writerPic, other.writerPic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriterName()).compareTo(other.isSetWriterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writerName, other.writerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipeName()).compareTo(other.isSetRecipeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipeName, other.recipeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipePic()).compareTo(other.isSetRecipePic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipePic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipePic, other.recipePic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipeComment()).compareTo(other.isSetRecipeComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipeComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipeComment, other.recipeComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipeInfo()).compareTo(other.isSetRecipeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipeInfo, other.recipeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipeLiked()).compareTo(other.isSetRecipeLiked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipeLiked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipeLiked, other.recipeLiked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipeType()).compareTo(other.isSetRecipeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipeType, other.recipeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Recipe(");
    boolean first = true;

    if (isSetRecipeId()) {
      sb.append("recipeId:");
      sb.append(this.recipeId);
      first = false;
    }
    if (isSetWriterId()) {
      if (!first) sb.append(", ");
      sb.append("writerId:");
      sb.append(this.writerId);
      first = false;
    }
    if (isSetWriterPic()) {
      if (!first) sb.append(", ");
      sb.append("writerPic:");
      if (this.writerPic == null) {
        sb.append("null");
      } else {
        sb.append(this.writerPic);
      }
      first = false;
    }
    if (isSetWriterName()) {
      if (!first) sb.append(", ");
      sb.append("writerName:");
      if (this.writerName == null) {
        sb.append("null");
      } else {
        sb.append(this.writerName);
      }
      first = false;
    }
    if (isSetRecipeName()) {
      if (!first) sb.append(", ");
      sb.append("recipeName:");
      if (this.recipeName == null) {
        sb.append("null");
      } else {
        sb.append(this.recipeName);
      }
      first = false;
    }
    if (isSetRecipePic()) {
      if (!first) sb.append(", ");
      sb.append("recipePic:");
      if (this.recipePic == null) {
        sb.append("null");
      } else {
        sb.append(this.recipePic);
      }
      first = false;
    }
    if (isSetRecipeComment()) {
      if (!first) sb.append(", ");
      sb.append("recipeComment:");
      if (this.recipeComment == null) {
        sb.append("null");
      } else {
        sb.append(this.recipeComment);
      }
      first = false;
    }
    if (isSetRecipeInfo()) {
      if (!first) sb.append(", ");
      sb.append("recipeInfo:");
      if (this.recipeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.recipeInfo);
      }
      first = false;
    }
    if (isSetRecipeLiked()) {
      if (!first) sb.append(", ");
      sb.append("recipeLiked:");
      sb.append(this.recipeLiked);
      first = false;
    }
    if (isSetRecipeType()) {
      if (!first) sb.append(", ");
      sb.append("recipeType:");
      if (this.recipeType == null) {
        sb.append("null");
      } else {
        sb.append(this.recipeType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (recipeInfo != null) {
      recipeInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecipeStandardSchemeFactory implements SchemeFactory {
    public RecipeStandardScheme getScheme() {
      return new RecipeStandardScheme();
    }
  }

  private static class RecipeStandardScheme extends StandardScheme<Recipe> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Recipe struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECIPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recipeId = iprot.readI32();
              struct.setRecipeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WRITER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.writerId = iprot.readI32();
              struct.setWriterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WRITER_PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.writerPic = iprot.readString();
              struct.setWriterPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WRITER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.writerName = iprot.readString();
              struct.setWriterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECIPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recipeName = iprot.readString();
              struct.setRecipeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECIPE_PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recipePic = iprot.readString();
              struct.setRecipePicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECIPE_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recipeComment = iprot.readString();
              struct.setRecipeCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECIPE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recipeInfo = new RecipeInfo();
              struct.recipeInfo.read(iprot);
              struct.setRecipeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECIPE_LIKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recipeLiked = iprot.readBool();
              struct.setRecipeLikedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECIPE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recipeType = com.foodRecipe.core.thrift.model.recipe.RECIPETYPE.findByValue(iprot.readI32());
              struct.setRecipeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Recipe struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRecipeId()) {
        oprot.writeFieldBegin(RECIPE_ID_FIELD_DESC);
        oprot.writeI32(struct.recipeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWriterId()) {
        oprot.writeFieldBegin(WRITER_ID_FIELD_DESC);
        oprot.writeI32(struct.writerId);
        oprot.writeFieldEnd();
      }
      if (struct.writerPic != null) {
        if (struct.isSetWriterPic()) {
          oprot.writeFieldBegin(WRITER_PIC_FIELD_DESC);
          oprot.writeString(struct.writerPic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.writerName != null) {
        if (struct.isSetWriterName()) {
          oprot.writeFieldBegin(WRITER_NAME_FIELD_DESC);
          oprot.writeString(struct.writerName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recipeName != null) {
        if (struct.isSetRecipeName()) {
          oprot.writeFieldBegin(RECIPE_NAME_FIELD_DESC);
          oprot.writeString(struct.recipeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recipePic != null) {
        if (struct.isSetRecipePic()) {
          oprot.writeFieldBegin(RECIPE_PIC_FIELD_DESC);
          oprot.writeString(struct.recipePic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recipeComment != null) {
        if (struct.isSetRecipeComment()) {
          oprot.writeFieldBegin(RECIPE_COMMENT_FIELD_DESC);
          oprot.writeString(struct.recipeComment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recipeInfo != null) {
        if (struct.isSetRecipeInfo()) {
          oprot.writeFieldBegin(RECIPE_INFO_FIELD_DESC);
          struct.recipeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecipeLiked()) {
        oprot.writeFieldBegin(RECIPE_LIKED_FIELD_DESC);
        oprot.writeBool(struct.recipeLiked);
        oprot.writeFieldEnd();
      }
      if (struct.recipeType != null) {
        if (struct.isSetRecipeType()) {
          oprot.writeFieldBegin(RECIPE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.recipeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecipeTupleSchemeFactory implements SchemeFactory {
    public RecipeTupleScheme getScheme() {
      return new RecipeTupleScheme();
    }
  }

  private static class RecipeTupleScheme extends TupleScheme<Recipe> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Recipe struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRecipeId()) {
        optionals.set(0);
      }
      if (struct.isSetWriterId()) {
        optionals.set(1);
      }
      if (struct.isSetWriterPic()) {
        optionals.set(2);
      }
      if (struct.isSetWriterName()) {
        optionals.set(3);
      }
      if (struct.isSetRecipeName()) {
        optionals.set(4);
      }
      if (struct.isSetRecipePic()) {
        optionals.set(5);
      }
      if (struct.isSetRecipeComment()) {
        optionals.set(6);
      }
      if (struct.isSetRecipeInfo()) {
        optionals.set(7);
      }
      if (struct.isSetRecipeLiked()) {
        optionals.set(8);
      }
      if (struct.isSetRecipeType()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetRecipeId()) {
        oprot.writeI32(struct.recipeId);
      }
      if (struct.isSetWriterId()) {
        oprot.writeI32(struct.writerId);
      }
      if (struct.isSetWriterPic()) {
        oprot.writeString(struct.writerPic);
      }
      if (struct.isSetWriterName()) {
        oprot.writeString(struct.writerName);
      }
      if (struct.isSetRecipeName()) {
        oprot.writeString(struct.recipeName);
      }
      if (struct.isSetRecipePic()) {
        oprot.writeString(struct.recipePic);
      }
      if (struct.isSetRecipeComment()) {
        oprot.writeString(struct.recipeComment);
      }
      if (struct.isSetRecipeInfo()) {
        struct.recipeInfo.write(oprot);
      }
      if (struct.isSetRecipeLiked()) {
        oprot.writeBool(struct.recipeLiked);
      }
      if (struct.isSetRecipeType()) {
        oprot.writeI32(struct.recipeType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Recipe struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.recipeId = iprot.readI32();
        struct.setRecipeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.writerId = iprot.readI32();
        struct.setWriterIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.writerPic = iprot.readString();
        struct.setWriterPicIsSet(true);
      }
      if (incoming.get(3)) {
        struct.writerName = iprot.readString();
        struct.setWriterNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recipeName = iprot.readString();
        struct.setRecipeNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recipePic = iprot.readString();
        struct.setRecipePicIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recipeComment = iprot.readString();
        struct.setRecipeCommentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recipeInfo = new RecipeInfo();
        struct.recipeInfo.read(iprot);
        struct.setRecipeInfoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recipeLiked = iprot.readBool();
        struct.setRecipeLikedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.recipeType = com.foodRecipe.core.thrift.model.recipe.RECIPETYPE.findByValue(iprot.readI32());
        struct.setRecipeTypeIsSet(true);
      }
    }
  }

}

