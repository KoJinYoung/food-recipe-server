/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foodRecipe.core.thrift.model.recipe;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-18")
public class RecipeInfo implements org.apache.thrift.TBase<RecipeInfo, RecipeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RecipeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecipeInfo");

  private static final org.apache.thrift.protocol.TField CALORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("calories", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COOK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cookTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INGREDIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ingredient", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecipeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecipeInfoTupleSchemeFactory());
  }

  public int calories; // optional
  /**
   * 
   * @see LEVEL
   */
  public LEVEL level; // optional
  public int cookTime; // optional
  public List<IngredientInfo> ingredient; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CALORIES((short)1, "calories"),
    /**
     * 
     * @see LEVEL
     */
    LEVEL((short)2, "level"),
    COOK_TIME((short)3, "cookTime"),
    INGREDIENT((short)4, "ingredient");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CALORIES
          return CALORIES;
        case 2: // LEVEL
          return LEVEL;
        case 3: // COOK_TIME
          return COOK_TIME;
        case 4: // INGREDIENT
          return INGREDIENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CALORIES_ISSET_ID = 0;
  private static final int __COOKTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CALORIES,_Fields.LEVEL,_Fields.COOK_TIME,_Fields.INGREDIENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CALORIES, new org.apache.thrift.meta_data.FieldMetaData("calories", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LEVEL.class)));
    tmpMap.put(_Fields.COOK_TIME, new org.apache.thrift.meta_data.FieldMetaData("cookTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.INGREDIENT, new org.apache.thrift.meta_data.FieldMetaData("ingredient", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IngredientInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecipeInfo.class, metaDataMap);
  }

  public RecipeInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecipeInfo(RecipeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.calories = other.calories;
    if (other.isSetLevel()) {
      this.level = other.level;
    }
    this.cookTime = other.cookTime;
    if (other.isSetIngredient()) {
      List<IngredientInfo> __this__ingredient = new ArrayList<IngredientInfo>(other.ingredient.size());
      for (IngredientInfo other_element : other.ingredient) {
        __this__ingredient.add(new IngredientInfo(other_element));
      }
      this.ingredient = __this__ingredient;
    }
  }

  public RecipeInfo deepCopy() {
    return new RecipeInfo(this);
  }

  @Override
  public void clear() {
    setCaloriesIsSet(false);
    this.calories = 0;
    this.level = null;
    setCookTimeIsSet(false);
    this.cookTime = 0;
    this.ingredient = null;
  }

  public int getCalories() {
    return this.calories;
  }

  public RecipeInfo setCalories(int calories) {
    this.calories = calories;
    setCaloriesIsSet(true);
    return this;
  }

  public void unsetCalories() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALORIES_ISSET_ID);
  }

  /** Returns true if field calories is set (has been assigned a value) and false otherwise */
  public boolean isSetCalories() {
    return EncodingUtils.testBit(__isset_bitfield, __CALORIES_ISSET_ID);
  }

  public void setCaloriesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALORIES_ISSET_ID, value);
  }

  /**
   * 
   * @see LEVEL
   */
  public LEVEL getLevel() {
    return this.level;
  }

  /**
   * 
   * @see LEVEL
   */
  public RecipeInfo setLevel(LEVEL level) {
    this.level = level;
    return this;
  }

  public void unsetLevel() {
    this.level = null;
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return this.level != null;
  }

  public void setLevelIsSet(boolean value) {
    if (!value) {
      this.level = null;
    }
  }

  public int getCookTime() {
    return this.cookTime;
  }

  public RecipeInfo setCookTime(int cookTime) {
    this.cookTime = cookTime;
    setCookTimeIsSet(true);
    return this;
  }

  public void unsetCookTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOKTIME_ISSET_ID);
  }

  /** Returns true if field cookTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCookTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COOKTIME_ISSET_ID);
  }

  public void setCookTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOKTIME_ISSET_ID, value);
  }

  public int getIngredientSize() {
    return (this.ingredient == null) ? 0 : this.ingredient.size();
  }

  public java.util.Iterator<IngredientInfo> getIngredientIterator() {
    return (this.ingredient == null) ? null : this.ingredient.iterator();
  }

  public void addToIngredient(IngredientInfo elem) {
    if (this.ingredient == null) {
      this.ingredient = new ArrayList<IngredientInfo>();
    }
    this.ingredient.add(elem);
  }

  public List<IngredientInfo> getIngredient() {
    return this.ingredient;
  }

  public RecipeInfo setIngredient(List<IngredientInfo> ingredient) {
    this.ingredient = ingredient;
    return this;
  }

  public void unsetIngredient() {
    this.ingredient = null;
  }

  /** Returns true if field ingredient is set (has been assigned a value) and false otherwise */
  public boolean isSetIngredient() {
    return this.ingredient != null;
  }

  public void setIngredientIsSet(boolean value) {
    if (!value) {
      this.ingredient = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CALORIES:
      if (value == null) {
        unsetCalories();
      } else {
        setCalories((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((LEVEL)value);
      }
      break;

    case COOK_TIME:
      if (value == null) {
        unsetCookTime();
      } else {
        setCookTime((Integer)value);
      }
      break;

    case INGREDIENT:
      if (value == null) {
        unsetIngredient();
      } else {
        setIngredient((List<IngredientInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CALORIES:
      return Integer.valueOf(getCalories());

    case LEVEL:
      return getLevel();

    case COOK_TIME:
      return Integer.valueOf(getCookTime());

    case INGREDIENT:
      return getIngredient();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CALORIES:
      return isSetCalories();
    case LEVEL:
      return isSetLevel();
    case COOK_TIME:
      return isSetCookTime();
    case INGREDIENT:
      return isSetIngredient();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecipeInfo)
      return this.equals((RecipeInfo)that);
    return false;
  }

  public boolean equals(RecipeInfo that) {
    if (that == null)
      return false;

    boolean this_present_calories = true && this.isSetCalories();
    boolean that_present_calories = true && that.isSetCalories();
    if (this_present_calories || that_present_calories) {
      if (!(this_present_calories && that_present_calories))
        return false;
      if (this.calories != that.calories)
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (!this.level.equals(that.level))
        return false;
    }

    boolean this_present_cookTime = true && this.isSetCookTime();
    boolean that_present_cookTime = true && that.isSetCookTime();
    if (this_present_cookTime || that_present_cookTime) {
      if (!(this_present_cookTime && that_present_cookTime))
        return false;
      if (this.cookTime != that.cookTime)
        return false;
    }

    boolean this_present_ingredient = true && this.isSetIngredient();
    boolean that_present_ingredient = true && that.isSetIngredient();
    if (this_present_ingredient || that_present_ingredient) {
      if (!(this_present_ingredient && that_present_ingredient))
        return false;
      if (!this.ingredient.equals(that.ingredient))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_calories = true && (isSetCalories());
    list.add(present_calories);
    if (present_calories)
      list.add(calories);

    boolean present_level = true && (isSetLevel());
    list.add(present_level);
    if (present_level)
      list.add(level.getValue());

    boolean present_cookTime = true && (isSetCookTime());
    list.add(present_cookTime);
    if (present_cookTime)
      list.add(cookTime);

    boolean present_ingredient = true && (isSetIngredient());
    list.add(present_ingredient);
    if (present_ingredient)
      list.add(ingredient);

    return list.hashCode();
  }

  @Override
  public int compareTo(RecipeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCalories()).compareTo(other.isSetCalories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calories, other.calories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookTime()).compareTo(other.isSetCookTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookTime, other.cookTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIngredient()).compareTo(other.isSetIngredient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIngredient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ingredient, other.ingredient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecipeInfo(");
    boolean first = true;

    if (isSetCalories()) {
      sb.append("calories:");
      sb.append(this.calories);
      first = false;
    }
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
    }
    if (isSetCookTime()) {
      if (!first) sb.append(", ");
      sb.append("cookTime:");
      sb.append(this.cookTime);
      first = false;
    }
    if (isSetIngredient()) {
      if (!first) sb.append(", ");
      sb.append("ingredient:");
      if (this.ingredient == null) {
        sb.append("null");
      } else {
        sb.append(this.ingredient);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecipeInfoStandardSchemeFactory implements SchemeFactory {
    public RecipeInfoStandardScheme getScheme() {
      return new RecipeInfoStandardScheme();
    }
  }

  private static class RecipeInfoStandardScheme extends StandardScheme<RecipeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecipeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CALORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.calories = iprot.readI32();
              struct.setCaloriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = com.foodRecipe.core.thrift.model.recipe.LEVEL.findByValue(iprot.readI32());
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COOK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cookTime = iprot.readI32();
              struct.setCookTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INGREDIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.ingredient = new ArrayList<IngredientInfo>(_list0.size);
                IngredientInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new IngredientInfo();
                  _elem1.read(iprot);
                  struct.ingredient.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setIngredientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecipeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCalories()) {
        oprot.writeFieldBegin(CALORIES_FIELD_DESC);
        oprot.writeI32(struct.calories);
        oprot.writeFieldEnd();
      }
      if (struct.level != null) {
        if (struct.isSetLevel()) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeI32(struct.level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCookTime()) {
        oprot.writeFieldBegin(COOK_TIME_FIELD_DESC);
        oprot.writeI32(struct.cookTime);
        oprot.writeFieldEnd();
      }
      if (struct.ingredient != null) {
        if (struct.isSetIngredient()) {
          oprot.writeFieldBegin(INGREDIENT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ingredient.size()));
            for (IngredientInfo _iter3 : struct.ingredient)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecipeInfoTupleSchemeFactory implements SchemeFactory {
    public RecipeInfoTupleScheme getScheme() {
      return new RecipeInfoTupleScheme();
    }
  }

  private static class RecipeInfoTupleScheme extends TupleScheme<RecipeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecipeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCalories()) {
        optionals.set(0);
      }
      if (struct.isSetLevel()) {
        optionals.set(1);
      }
      if (struct.isSetCookTime()) {
        optionals.set(2);
      }
      if (struct.isSetIngredient()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCalories()) {
        oprot.writeI32(struct.calories);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level.getValue());
      }
      if (struct.isSetCookTime()) {
        oprot.writeI32(struct.cookTime);
      }
      if (struct.isSetIngredient()) {
        {
          oprot.writeI32(struct.ingredient.size());
          for (IngredientInfo _iter4 : struct.ingredient)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecipeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.calories = iprot.readI32();
        struct.setCaloriesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.level = com.foodRecipe.core.thrift.model.recipe.LEVEL.findByValue(iprot.readI32());
        struct.setLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cookTime = iprot.readI32();
        struct.setCookTimeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ingredient = new ArrayList<IngredientInfo>(_list5.size);
          IngredientInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new IngredientInfo();
            _elem6.read(iprot);
            struct.ingredient.add(_elem6);
          }
        }
        struct.setIngredientIsSet(true);
      }
    }
  }

}

