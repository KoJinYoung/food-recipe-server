/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "UserInfo.h"

#import "UserAPI.h"


@implementation makcipeAPIUserAPIConstants
+ (void) initialize {
}
@end

@interface makcipeAPIsignup_args : NSObject <TBase, NSCoding> {
  NSString * __email;
  NSString * __password;

  BOOL __email_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation makcipeAPIsignup_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email password: (NSString *) password
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signup_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIsignup_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPISignup_result : NSObject <TBase, NSCoding> {
  makcipeAPIUser * __success;
  makcipeAPIUserException * __uex;

  BOOL __success_isset;
  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) makcipeAPIUser * success;
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUser *) success;
- (void) setSuccess: (makcipeAPIUser *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPISignup_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUser *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (makcipeAPIUser *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUser *fieldValue = [[makcipeAPIUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Signup_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPISignup_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIsignupWithFacebook_args : NSObject <TBase, NSCoding> {
  NSString * __fb_id;
  NSString * __name;
  NSString * __pic_url;

  BOOL __fb_id_isset;
  BOOL __name_isset;
  BOOL __pic_url_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=fb_id, setter=setFb_id:) NSString * fb_id;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=pic_url, setter=setPic_url:) NSString * pic_url;
#endif

- (id) init;
- (id) initWithFb_id: (NSString *) fb_id name: (NSString *) name pic_url: (NSString *) pic_url;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) fb_id;
- (void) setFb_id: (NSString *) fb_id;
#endif
- (BOOL) fb_idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pic_url;
- (void) setPic_url: (NSString *) pic_url;
#endif
- (BOOL) pic_urlIsSet;

@end

@implementation makcipeAPIsignupWithFacebook_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFb_id: (NSString *) fb_id name: (NSString *) name pic_url: (NSString *) pic_url
{
  self = [super init];
  __fb_id = [fb_id retain_stub];
  __fb_id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __pic_url = [pic_url retain_stub];
  __pic_url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"fb_id"])
  {
    __fb_id = [[decoder decodeObjectForKey: @"fb_id"] retain_stub];
    __fb_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"pic_url"])
  {
    __pic_url = [[decoder decodeObjectForKey: @"pic_url"] retain_stub];
    __pic_url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__fb_id_isset)
  {
    [encoder encodeObject: __fb_id forKey: @"fb_id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__pic_url_isset)
  {
    [encoder encodeObject: __pic_url forKey: @"pic_url"];
  }
}

- (void) dealloc
{
  [__fb_id release_stub];
  [__name release_stub];
  [__pic_url release_stub];
  [super dealloc_stub];
}

- (NSString *) fb_id {
  return [[__fb_id retain_stub] autorelease_stub];
}

- (void) setFb_id: (NSString *) fb_id {
  [fb_id retain_stub];
  [__fb_id release_stub];
  __fb_id = fb_id;
  __fb_id_isset = YES;
}

- (BOOL) fb_idIsSet {
  return __fb_id_isset;
}

- (void) unsetFb_id {
  [__fb_id release_stub];
  __fb_id = nil;
  __fb_id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) pic_url {
  return [[__pic_url retain_stub] autorelease_stub];
}

- (void) setPic_url: (NSString *) pic_url {
  [pic_url retain_stub];
  [__pic_url release_stub];
  __pic_url = pic_url;
  __pic_url_isset = YES;
}

- (BOOL) pic_urlIsSet {
  return __pic_url_isset;
}

- (void) unsetPic_url {
  [__pic_url release_stub];
  __pic_url = nil;
  __pic_url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFb_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPic_url: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signupWithFacebook_args"];
  if (__fb_id_isset) {
    if (__fb_id != nil) {
      [outProtocol writeFieldBeginWithName: @"fb_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __fb_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pic_url_isset) {
    if (__pic_url != nil) {
      [outProtocol writeFieldBeginWithName: @"pic_url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pic_url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIsignupWithFacebook_args("];
  [ms appendString: @"fb_id:"];
  [ms appendFormat: @"\"%@\"", __fb_id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",pic_url:"];
  [ms appendFormat: @"\"%@\"", __pic_url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPISignupWithFacebook_result : NSObject <TBase, NSCoding> {
  makcipeAPIUser * __success;
  makcipeAPIUserException * __uex;

  BOOL __success_isset;
  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) makcipeAPIUser * success;
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUser *) success;
- (void) setSuccess: (makcipeAPIUser *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPISignupWithFacebook_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUser *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (makcipeAPIUser *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUser *fieldValue = [[makcipeAPIUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignupWithFacebook_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPISignupWithFacebook_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIsignupWithKakao_args : NSObject <TBase, NSCoding> {
  NSString * __ko_id;
  NSString * __name;
  NSString * __pic_url;

  BOOL __ko_id_isset;
  BOOL __name_isset;
  BOOL __pic_url_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ko_id, setter=setKo_id:) NSString * ko_id;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=pic_url, setter=setPic_url:) NSString * pic_url;
#endif

- (id) init;
- (id) initWithKo_id: (NSString *) ko_id name: (NSString *) name pic_url: (NSString *) pic_url;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) ko_id;
- (void) setKo_id: (NSString *) ko_id;
#endif
- (BOOL) ko_idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) name;
- (void) setName: (NSString *) name;
#endif
- (BOOL) nameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pic_url;
- (void) setPic_url: (NSString *) pic_url;
#endif
- (BOOL) pic_urlIsSet;

@end

@implementation makcipeAPIsignupWithKakao_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKo_id: (NSString *) ko_id name: (NSString *) name pic_url: (NSString *) pic_url
{
  self = [super init];
  __ko_id = [ko_id retain_stub];
  __ko_id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __pic_url = [pic_url retain_stub];
  __pic_url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ko_id"])
  {
    __ko_id = [[decoder decodeObjectForKey: @"ko_id"] retain_stub];
    __ko_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"pic_url"])
  {
    __pic_url = [[decoder decodeObjectForKey: @"pic_url"] retain_stub];
    __pic_url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ko_id_isset)
  {
    [encoder encodeObject: __ko_id forKey: @"ko_id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__pic_url_isset)
  {
    [encoder encodeObject: __pic_url forKey: @"pic_url"];
  }
}

- (void) dealloc
{
  [__ko_id release_stub];
  [__name release_stub];
  [__pic_url release_stub];
  [super dealloc_stub];
}

- (NSString *) ko_id {
  return [[__ko_id retain_stub] autorelease_stub];
}

- (void) setKo_id: (NSString *) ko_id {
  [ko_id retain_stub];
  [__ko_id release_stub];
  __ko_id = ko_id;
  __ko_id_isset = YES;
}

- (BOOL) ko_idIsSet {
  return __ko_id_isset;
}

- (void) unsetKo_id {
  [__ko_id release_stub];
  __ko_id = nil;
  __ko_id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) pic_url {
  return [[__pic_url retain_stub] autorelease_stub];
}

- (void) setPic_url: (NSString *) pic_url {
  [pic_url retain_stub];
  [__pic_url release_stub];
  __pic_url = pic_url;
  __pic_url_isset = YES;
}

- (BOOL) pic_urlIsSet {
  return __pic_url_isset;
}

- (void) unsetPic_url {
  [__pic_url release_stub];
  __pic_url = nil;
  __pic_url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKo_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPic_url: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signupWithKakao_args"];
  if (__ko_id_isset) {
    if (__ko_id != nil) {
      [outProtocol writeFieldBeginWithName: @"ko_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ko_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pic_url_isset) {
    if (__pic_url != nil) {
      [outProtocol writeFieldBeginWithName: @"pic_url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pic_url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIsignupWithKakao_args("];
  [ms appendString: @"ko_id:"];
  [ms appendFormat: @"\"%@\"", __ko_id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",pic_url:"];
  [ms appendFormat: @"\"%@\"", __pic_url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPISignupWithKakao_result : NSObject <TBase, NSCoding> {
  makcipeAPIUser * __success;
  makcipeAPIUserException * __uex;

  BOOL __success_isset;
  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) makcipeAPIUser * success;
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUser *) success;
- (void) setSuccess: (makcipeAPIUser *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPISignupWithKakao_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUser *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (makcipeAPIUser *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUser *fieldValue = [[makcipeAPIUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SignupWithKakao_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPISignupWithKakao_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIsignin_args : NSObject <TBase, NSCoding> {
  NSString * __email;
  NSString * __password;

  BOOL __email_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation makcipeAPIsignin_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email password: (NSString *) password
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signin_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIsignin_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPISignin_result : NSObject <TBase, NSCoding> {
  makcipeAPIUser * __success;
  makcipeAPIUserException * __uex;

  BOOL __success_isset;
  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) makcipeAPIUser * success;
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUser *) success;
- (void) setSuccess: (makcipeAPIUser *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPISignin_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUser *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (makcipeAPIUser *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUser *fieldValue = [[makcipeAPIUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Signin_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPISignin_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIsignout_args : NSObject <TBase, NSCoding> {
  NSString * __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
#endif

- (id) init;
- (id) initWithToken: (NSString *) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

@end

@implementation makcipeAPIsignout_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"signout_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIsignout_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPISignout_result : NSObject <TBase, NSCoding> {
  makcipeAPIUserException * __uex;

  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithUex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPISignout_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Signout_result"];

  if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPISignout_result("];
  [ms appendString: @"uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIwithdraw_args : NSObject <TBase, NSCoding> {
  NSString * __token;
  NSString * __password;

  BOOL __token_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithToken: (NSString *) token password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation makcipeAPIwithdraw_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token password: (NSString *) password
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__token release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"withdraw_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIwithdraw_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIWithdraw_result : NSObject <TBase, NSCoding> {
  makcipeAPIUserException * __uex;

  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithUex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPIWithdraw_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Withdraw_result"];

  if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIWithdraw_result("];
  [ms appendString: @"uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIgetUserInfo_args : NSObject <TBase, NSCoding> {
  NSString * __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) NSString * token;
#endif

- (id) init;
- (id) initWithToken: (NSString *) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) token;
- (void) setToken: (NSString *) token;
#endif
- (BOOL) tokenIsSet;

@end

@implementation makcipeAPIgetUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIgetUserInfo_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makcipeAPIGetUserInfo_result : NSObject <TBase, NSCoding> {
  makcipeAPIUser * __success;
  makcipeAPIUserException * __uex;

  BOOL __success_isset;
  BOOL __uex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) makcipeAPIUser * success;
@property (nonatomic, retain, getter=uex, setter=setUex:) makcipeAPIUserException * uex;
#endif

- (id) init;
- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (makcipeAPIUser *) success;
- (void) setSuccess: (makcipeAPIUser *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (makcipeAPIUserException *) uex;
- (void) setUex: (makcipeAPIUserException *) uex;
#endif
- (BOOL) uexIsSet;

@end

@implementation makcipeAPIGetUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (makcipeAPIUser *) success uex: (makcipeAPIUserException *) uex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __uex = [uex retain_stub];
  __uex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"uex"])
  {
    __uex = [[decoder decodeObjectForKey: @"uex"] retain_stub];
    __uex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__uex_isset)
  {
    [encoder encodeObject: __uex forKey: @"uex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__uex release_stub];
  [super dealloc_stub];
}

- (makcipeAPIUser *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (makcipeAPIUser *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (makcipeAPIUserException *) uex {
  return [[__uex retain_stub] autorelease_stub];
}

- (void) setUex: (makcipeAPIUserException *) uex {
  [uex retain_stub];
  [__uex release_stub];
  __uex = uex;
  __uex_isset = YES;
}

- (BOOL) uexIsSet {
  return __uex_isset;
}

- (void) unsetUex {
  [__uex release_stub];
  __uex = nil;
  __uex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUser *fieldValue = [[makcipeAPIUser alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          makcipeAPIUserException *fieldValue = [[makcipeAPIUserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUex: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__uex_isset) {
    if (__uex != nil) {
      [outProtocol writeFieldBeginWithName: @"uex" type: TType_STRUCT fieldID: 1];
      [__uex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makcipeAPIGetUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",uex:"];
  [ms appendFormat: @"%@", __uex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation makcipeAPIUserAPIClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_signup: (NSString *) email password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"signup" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signup_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (makcipeAPIUser *) recv_signup
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPISignup_result * result = [[[makcipeAPISignup_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signup failed: unknown result"];
}

- (makcipeAPIUser *) signup: (NSString *) email password: (NSString *) password
{
  [self send_signup : email password: password];
  return [self recv_signup];
}

- (void) send_signupWithFacebook: (NSString *) fb_id name: (NSString *) name pic_url: (NSString *) pic_url
{
  [outProtocol writeMessageBeginWithName: @"signupWithFacebook" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signupWithFacebook_args"];
  if (fb_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"fb_id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: fb_id];
    [outProtocol writeFieldEnd];
  }
  if (name != nil)  {
    [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: name];
    [outProtocol writeFieldEnd];
  }
  if (pic_url != nil)  {
    [outProtocol writeFieldBeginWithName: @"pic_url" type: TType_STRING fieldID: 3];
    [outProtocol writeString: pic_url];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (makcipeAPIUser *) recv_signupWithFacebook
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPISignupWithFacebook_result * result = [[[makcipeAPISignupWithFacebook_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signupWithFacebook failed: unknown result"];
}

- (makcipeAPIUser *) signupWithFacebook: (NSString *) fb_id name: (NSString *) name pic_url: (NSString *) pic_url
{
  [self send_signupWithFacebook : fb_id name: name pic_url: pic_url];
  return [self recv_signupWithFacebook];
}

- (void) send_signupWithKakao: (NSString *) ko_id name: (NSString *) name pic_url: (NSString *) pic_url
{
  [outProtocol writeMessageBeginWithName: @"signupWithKakao" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signupWithKakao_args"];
  if (ko_id != nil)  {
    [outProtocol writeFieldBeginWithName: @"ko_id" type: TType_STRING fieldID: 1];
    [outProtocol writeString: ko_id];
    [outProtocol writeFieldEnd];
  }
  if (name != nil)  {
    [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: name];
    [outProtocol writeFieldEnd];
  }
  if (pic_url != nil)  {
    [outProtocol writeFieldBeginWithName: @"pic_url" type: TType_STRING fieldID: 3];
    [outProtocol writeString: pic_url];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (makcipeAPIUser *) recv_signupWithKakao
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPISignupWithKakao_result * result = [[[makcipeAPISignupWithKakao_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signupWithKakao failed: unknown result"];
}

- (makcipeAPIUser *) signupWithKakao: (NSString *) ko_id name: (NSString *) name pic_url: (NSString *) pic_url
{
  [self send_signupWithKakao : ko_id name: name pic_url: pic_url];
  return [self recv_signupWithKakao];
}

- (void) send_signin: (NSString *) email password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"signin" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signin_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (makcipeAPIUser *) recv_signin
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPISignin_result * result = [[[makcipeAPISignin_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"signin failed: unknown result"];
}

- (makcipeAPIUser *) signin: (NSString *) email password: (NSString *) password
{
  [self send_signin : email password: password];
  return [self recv_signin];
}

- (void) send_signout: (NSString *) token
{
  [outProtocol writeMessageBeginWithName: @"signout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"signout_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_signout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPISignout_result * result = [[[makcipeAPISignout_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  return;
}

- (void) signout: (NSString *) token
{
  [self send_signout : token];
  [self recv_signout];
}

- (void) send_withdraw: (NSString *) token password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"withdraw" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"withdraw_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_withdraw
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPIWithdraw_result * result = [[[makcipeAPIWithdraw_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  return;
}

- (void) withdraw: (NSString *) token password: (NSString *) password
{
  [self send_withdraw : token password: password];
  [self recv_withdraw];
}

- (void) send_getUserInfo: (NSString *) token
{
  [outProtocol writeMessageBeginWithName: @"getUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserInfo_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (makcipeAPIUser *) recv_getUserInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  makcipeAPIGetUserInfo_result * result = [[[makcipeAPIGetUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result uexIsSet]) {
    @throw [result uex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserInfo failed: unknown result"];
}

- (makcipeAPIUser *) getUserInfo: (NSString *) token
{
  [self send_getUserInfo : token];
  return [self recv_getUserInfo];
}

@end

@implementation makcipeAPIUserAPIProcessor

- (id) initWithUserAPI: (id <makcipeAPIUserAPI>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_signup_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"signup"];
  }
  {
    SEL s = @selector(process_signupWithFacebook_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"signupWithFacebook"];
  }
  {
    SEL s = @selector(process_signupWithKakao_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"signupWithKakao"];
  }
  {
    SEL s = @selector(process_signin_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"signin"];
  }
  {
    SEL s = @selector(process_signout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"signout"];
  }
  {
    SEL s = @selector(process_withdraw_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"withdraw"];
  }
  {
    SEL s = @selector(process_getUserInfo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUserInfo"];
  }
  return self;
}

- (id<makcipeAPIUserAPI>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_signup_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIsignup_args * args = [[makcipeAPIsignup_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPISignup_result * result = [[makcipeAPISignup_result alloc] init];
  [result setSuccess: [mService signup: [args email] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"signup"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_signupWithFacebook_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIsignupWithFacebook_args * args = [[makcipeAPIsignupWithFacebook_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPISignupWithFacebook_result * result = [[makcipeAPISignupWithFacebook_result alloc] init];
  [result setSuccess: [mService signupWithFacebook: [args fb_id] name: [args name] pic_url: [args pic_url]]];
  [outProtocol writeMessageBeginWithName: @"signupWithFacebook"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_signupWithKakao_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIsignupWithKakao_args * args = [[makcipeAPIsignupWithKakao_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPISignupWithKakao_result * result = [[makcipeAPISignupWithKakao_result alloc] init];
  [result setSuccess: [mService signupWithKakao: [args ko_id] name: [args name] pic_url: [args pic_url]]];
  [outProtocol writeMessageBeginWithName: @"signupWithKakao"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_signin_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIsignin_args * args = [[makcipeAPIsignin_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPISignin_result * result = [[makcipeAPISignin_result alloc] init];
  [result setSuccess: [mService signin: [args email] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"signin"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_signout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIsignout_args * args = [[makcipeAPIsignout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPISignout_result * result = [[makcipeAPISignout_result alloc] init];
  [mService signout: [args token]];
  [outProtocol writeMessageBeginWithName: @"signout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_withdraw_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIwithdraw_args * args = [[makcipeAPIwithdraw_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPIWithdraw_result * result = [[makcipeAPIWithdraw_result alloc] init];
  [mService withdraw: [args token] password: [args password]];
  [outProtocol writeMessageBeginWithName: @"withdraw"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makcipeAPIgetUserInfo_args * args = [[makcipeAPIgetUserInfo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  makcipeAPIGetUserInfo_result * result = [[makcipeAPIGetUserInfo_result alloc] init];
  [result setSuccess: [mService getUserInfo: [args token]]];
  [outProtocol writeMessageBeginWithName: @"getUserInfo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

