//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var Recipe_ttypes = require('./Recipe_types')


var ttypes = require('./RecipeAPI_types');
//HELPER FUNCTIONS AND STRUCTURES

RecipeAPI_setMysql_args = function(args) {
};
RecipeAPI_setMysql_args.prototype = {};
RecipeAPI_setMysql_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeAPI_setMysql_args.prototype.write = function(output) {
  output.writeStructBegin('RecipeAPI_setMysql_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeAPI_setMysql_result = function(args) {
};
RecipeAPI_setMysql_result.prototype = {};
RecipeAPI_setMysql_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeAPI_setMysql_result.prototype.write = function(output) {
  output.writeStructBegin('RecipeAPI_setMysql_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeAPI_closeMysql_args = function(args) {
};
RecipeAPI_closeMysql_args.prototype = {};
RecipeAPI_closeMysql_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeAPI_closeMysql_args.prototype.write = function(output) {
  output.writeStructBegin('RecipeAPI_closeMysql_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeAPI_closeMysql_result = function(args) {
};
RecipeAPI_closeMysql_result.prototype = {};
RecipeAPI_closeMysql_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeAPI_closeMysql_result.prototype.write = function(output) {
  output.writeStructBegin('RecipeAPI_closeMysql_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeAPI_getAll_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
RecipeAPI_getAll_args.prototype = {};
RecipeAPI_getAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeAPI_getAll_args.prototype.write = function(output) {
  output.writeStructBegin('RecipeAPI_getAll_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeAPI_getAll_result = function(args) {
  this.uex = null;
  if (args instanceof Recipe_ttypes.RecipeException) {
    this.uex = args;
    return;
  }
  if (args) {
    if (args.uex !== undefined) {
      this.uex = args.uex;
    }
  }
};
RecipeAPI_getAll_result.prototype = {};
RecipeAPI_getAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uex = new Recipe_ttypes.RecipeException();
        this.uex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecipeAPI_getAll_result.prototype.write = function(output) {
  output.writeStructBegin('RecipeAPI_getAll_result');
  if (this.uex !== null && this.uex !== undefined) {
    output.writeFieldBegin('uex', Thrift.Type.STRUCT, 1);
    this.uex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecipeAPIClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
RecipeAPIClient.prototype = {};
RecipeAPIClient.prototype.setMysql = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setMysql();
};

RecipeAPIClient.prototype.send_setMysql = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setMysql', Thrift.MessageType.CALL, this.seqid);
  var args = new RecipeAPI_setMysql_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RecipeAPIClient.prototype.recv_setMysql = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RecipeAPI_setMysql_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
RecipeAPIClient.prototype.closeMysql = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_closeMysql();
};

RecipeAPIClient.prototype.send_closeMysql = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeMysql', Thrift.MessageType.CALL, this.seqid);
  var args = new RecipeAPI_closeMysql_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RecipeAPIClient.prototype.recv_closeMysql = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RecipeAPI_closeMysql_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
RecipeAPIClient.prototype.getAll = function(table, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getAll(table);
};

RecipeAPIClient.prototype.send_getAll = function(table) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAll', Thrift.MessageType.CALL, this.seqid);
  var args = new RecipeAPI_getAll_args();
  args.table = table;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RecipeAPIClient.prototype.recv_getAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new RecipeAPI_getAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.uex) {
    return callback(result.uex);
  }
  callback(null)
};
RecipeAPIProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
RecipeAPIProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

RecipeAPIProcessor.prototype.process_setMysql = function(seqid, input, output) {
  var args = new RecipeAPI_setMysql_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setMysql(function (err, result) {
    var result = new RecipeAPI_setMysql_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setMysql", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

RecipeAPIProcessor.prototype.process_closeMysql = function(seqid, input, output) {
  var args = new RecipeAPI_closeMysql_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.closeMysql(function (err, result) {
    var result = new RecipeAPI_closeMysql_result((err != null ? err : {success: result}));
    output.writeMessageBegin("closeMysql", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

RecipeAPIProcessor.prototype.process_getAll = function(seqid, input, output) {
  var args = new RecipeAPI_getAll_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getAll(args.table, function (err, result) {
    var result = new RecipeAPI_getAll_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

